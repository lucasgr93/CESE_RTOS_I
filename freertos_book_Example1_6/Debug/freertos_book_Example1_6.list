
freertos_book_Example1_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074c4  080074c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074cc  080074cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074cc  080074cc  000174cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080074d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000047a8  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000481c  2000481c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bab3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d8  00000000  00000000  0003bb57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  0003f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001580  00000000  00000000  00040b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053b8  00000000  00000000  00042098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019448  00000000  00000000  00047450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecfbc  00000000  00000000  00060898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d854  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a44  00000000  00000000  0014d8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007240 	.word	0x08007240

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007240 	.word	0x08007240

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b08c      	sub	sp, #48	; 0x30
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	const char *pcTextForMain = "freertos_book_Example1_6 is running: Print run time statistics and task list\r\n\n";
 80005aa:	4b3b      	ldr	r3, [pc, #236]	; (8000698 <main+0xf4>)
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 feb9 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f883 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f9dd 	bl	8000974 <MX_GPIO_Init>
  MX_ETH_Init();
 80005ba:	f000 f8e9 	bl	8000790 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005be:	f000 f981 	bl	80008c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005c2:	f000 f9a9 	bl	8000918 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005c6:	f000 f931 	bl	800082c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
    vPrintString( pcTextForMain );
 80005ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80005cc:	f000 fcfe 	bl	8000fcc <vPrintString>

    /* Start timer */
    HAL_TIM_Base_Start_IT(&htim2);
 80005d0:	4832      	ldr	r0, [pc, #200]	; (800069c <main+0xf8>)
 80005d2:	f002 fb67 	bl	8002ca4 <HAL_TIM_Base_Start_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <main+0xfc>)
 80005d8:	463c      	mov	r4, r7
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	682b      	ldr	r3, [r5, #0]
 80005e2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e4:	463b      	mov	r3, r7
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 fe70 	bl	80042ce <osThreadCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a2c      	ldr	r2, [pc, #176]	; (80006a4 <main+0x100>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	BaseType_t ret;

	/* TaskStats thread at priority 2 */
	ret = xTaskCreate( vTaskStats,					/* Pointer to the function thats implement the task. */
 80005f4:	2300      	movs	r3, #0
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000602:	4929      	ldr	r1, [pc, #164]	; (80006a8 <main+0x104>)
 8000604:	4829      	ldr	r0, [pc, #164]	; (80006ac <main+0x108>)
 8000606:	f003 ff51 	bl	80044ac <xTaskCreate>
 800060a:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 2. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 800060c:	6a3b      	ldr	r3, [r7, #32]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00a      	beq.n	8000628 <main+0x84>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000624:	bf00      	nop
 8000626:	e7fe      	b.n	8000626 <main+0x82>

	/* TaskDemo 1 thread at priority 1 */
	ret = xTaskCreate( vTaskDemo,					/* Pointer to the function thats implement the task. */
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2301      	movs	r3, #1
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2300      	movs	r3, #0
 8000632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000636:	491e      	ldr	r1, [pc, #120]	; (80006b0 <main+0x10c>)
 8000638:	481e      	ldr	r0, [pc, #120]	; (80006b4 <main+0x110>)
 800063a:	f003 ff37 	bl	80044ac <xTaskCreate>
 800063e:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d00a      	beq.n	800065c <main+0xb8>
	__asm volatile
 8000646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	61bb      	str	r3, [r7, #24]
}
 8000658:	bf00      	nop
 800065a:	e7fe      	b.n	800065a <main+0xb6>

	/* TaskDemo 2 thread at priority 1 */
	ret = xTaskCreate( vTaskDemo,					/* Pointer to the function thats implement the task. */
 800065c:	2300      	movs	r3, #0
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066a:	4913      	ldr	r1, [pc, #76]	; (80006b8 <main+0x114>)
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <main+0x110>)
 800066e:	f003 ff1d 	bl	80044ac <xTaskCreate>
 8000672:	6238      	str	r0, [r7, #32]
					   NULL,						/* We are not using the task parameter.		*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );                   	/* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000674:	6a3b      	ldr	r3, [r7, #32]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d00a      	beq.n	8000690 <main+0xec>
	__asm volatile
 800067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	617b      	str	r3, [r7, #20]
}
 800068c:	bf00      	nop
 800068e:	e7fe      	b.n	800068e <main+0xea>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000690:	f003 fe16 	bl	80042c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0xf0>
 8000696:	bf00      	nop
 8000698:	08007264 	.word	0x08007264
 800069c:	200002b8 	.word	0x200002b8
 80006a0:	080072d8 	.word	0x080072d8
 80006a4:	20000850 	.word	0x20000850
 80006a8:	080072b4 	.word	0x080072b4
 80006ac:	08001255 	.word	0x08001255
 80006b0:	080072c0 	.word	0x080072c0
 80006b4:	0800119d 	.word	0x0800119d
 80006b8:	080072cc 	.word	0x080072cc

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fd9b 	bl	8006206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800071c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000730:	23a8      	movs	r3, #168	; 0xa8
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fd2d 	bl	80021a0 <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9e8 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff8e 	bl	8002690 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9d1 	bl	8000b20 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ETH_Init+0x84>)
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <MX_ETH_Init+0x88>)
 8000798:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_ETH_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ETH_Init+0x8c>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_ETH_Init+0x8c>)
 80007a8:	22e1      	movs	r2, #225	; 0xe1
 80007aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_ETH_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ETH_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_ETH_Init+0x84>)
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_ETH_Init+0x8c>)
 80007c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ETH_Init+0x84>)
 80007c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ETH_Init+0x84>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <MX_ETH_Init+0x90>)
 80007d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_ETH_Init+0x84>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_ETH_Init+0x94>)
 80007d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ETH_Init+0x84>)
 80007da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_ETH_Init+0x84>)
 80007e2:	f000 fee7 	bl	80015b4 <HAL_ETH_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 f998 	bl	8000b20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f0:	2238      	movs	r2, #56	; 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_ETH_Init+0x98>)
 80007f6:	f005 fd06 	bl	8006206 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_ETH_Init+0x98>)
 80007fc:	2221      	movs	r2, #33	; 0x21
 80007fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_ETH_Init+0x98>)
 8000802:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000806:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_ETH_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000208 	.word	0x20000208
 8000818:	40028000 	.word	0x40028000
 800081c:	20000854 	.word	0x20000854
 8000820:	20000168 	.word	0x20000168
 8000824:	200000c8 	.word	0x200000c8
 8000828:	20000090 	.word	0x20000090

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_TIM2_Init+0x94>)
 800084a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000852:	2201      	movs	r2, #1
 8000854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 42-1;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM2_Init+0x94>)
 800085e:	2229      	movs	r2, #41	; 0x29
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000870:	f002 f960 	bl	8002b34 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f951 	bl	8000b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_TIM2_Init+0x94>)
 800088c:	f002 fb82 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000896:	f000 f943 	bl	8000b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	; (80008c0 <MX_TIM2_Init+0x94>)
 80008a8:	f002 fd9e 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80008b2:	f000 f935 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200002b8 	.word	0x200002b8

080008c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART3_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART3_UART_Init+0x4c>)
 80008fc:	f002 fe04 	bl	8003508 <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f90b 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000300 	.word	0x20000300
 8000914:	40004800 	.word	0x40004800

08000918 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000922:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2204      	movs	r2, #4
 8000928:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	2202      	movs	r2, #2
 800092e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000938:	2202      	movs	r2, #2
 800093a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093e:	2201      	movs	r2, #1
 8000940:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000950:	2201      	movs	r2, #1
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095c:	f001 fb03 	bl	8001f66 <HAL_PCD_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f8db 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000344 	.word	0x20000344

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a4b      	ldr	r2, [pc, #300]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b49      	ldr	r3, [pc, #292]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b42      	ldr	r3, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b3e      	ldr	r3, [pc, #248]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a3d      	ldr	r2, [pc, #244]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a36      	ldr	r2, [pc, #216]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a2f      	ldr	r2, [pc, #188]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b29      	ldr	r3, [pc, #164]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0x14c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a38:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <MX_GPIO_Init+0x150>)
 8000a3a:	f001 fa7b 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2140      	movs	r1, #64	; 0x40
 8000a42:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <MX_GPIO_Init+0x154>)
 8000a44:	f001 fa76 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <MX_GPIO_Init+0x158>)
 8000a60:	f001 f8bc 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a64:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_GPIO_Init+0x150>)
 8000a7e:	f001 f8ad 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a82:	2340      	movs	r3, #64	; 0x40
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	4619      	mov	r1, r3
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <MX_GPIO_Init+0x154>)
 8000a9a:	f001 f89f 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a9e:	2380      	movs	r3, #128	; 0x80
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_GPIO_Init+0x154>)
 8000ab2:	f001 f893 	bl	8001bdc <HAL_GPIO_Init>

}
 8000ab6:	bf00      	nop
 8000ab8:	3730      	adds	r7, #48	; 0x30
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40021800 	.word	0x40021800
 8000acc:	40020800 	.word	0x40020800

08000ad0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000ad8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000adc:	f003 fc1e 	bl	800431c <osDelay>
 8000ae0:	e7fa      	b.n	8000ad8 <StartDefaultTask+0x8>
	...

08000ae4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
#if( TASKS_SCOPE == TASKS_OUTSIDE_MAIN)
    if (htim->Instance == TIM2) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af4:	d104      	bne.n	8000b00 <HAL_TIM_PeriodElapsedCallback+0x1c>
    	ulHighFrequencyTimerTicks++;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000afe:	6013      	str	r3, [r2, #0]
	}
#endif

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8000b0a:	f000 fc2d 	bl	8001368 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200008a8 	.word	0x200008a8
 8000b1c:	40001400 	.word	0x40001400

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_MspInit+0x54>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <HAL_MspInit+0x54>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x54>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_MspInit+0x54>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_MspInit+0x54>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_MspInit+0x54>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	f06f 0001 	mvn.w	r0, #1
 8000b72:	f000 fcf5 	bl	8001560 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a55      	ldr	r2, [pc, #340]	; (8000cf8 <HAL_ETH_MspInit+0x174>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	f040 80a4 	bne.w	8000cf0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
 8000bac:	4b53      	ldr	r3, [pc, #332]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb0:	4a52      	ldr	r2, [pc, #328]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	4b50      	ldr	r3, [pc, #320]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc0:	623b      	str	r3, [r7, #32]
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
 8000bc8:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a4b      	ldr	r2, [pc, #300]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a44      	ldr	r2, [pc, #272]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	4b3e      	ldr	r3, [pc, #248]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a3d      	ldr	r2, [pc, #244]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b34      	ldr	r3, [pc, #208]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	4b29      	ldr	r3, [pc, #164]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	4a28      	ldr	r2, [pc, #160]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <HAL_ETH_MspInit+0x178>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7c:	230b      	movs	r3, #11
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	481e      	ldr	r0, [pc, #120]	; (8000d00 <HAL_ETH_MspInit+0x17c>)
 8000c88:	f000 ffa8 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c8c:	2386      	movs	r3, #134	; 0x86
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9c:	230b      	movs	r3, #11
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4817      	ldr	r0, [pc, #92]	; (8000d04 <HAL_ETH_MspInit+0x180>)
 8000ca8:	f000 ff98 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbe:	230b      	movs	r3, #11
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <HAL_ETH_MspInit+0x184>)
 8000cca:	f000 ff87 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4808      	ldr	r0, [pc, #32]	; (8000d0c <HAL_ETH_MspInit+0x188>)
 8000cec:	f000 ff76 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3738      	adds	r7, #56	; 0x38
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40028000 	.word	0x40028000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020800 	.word	0x40020800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40021800 	.word	0x40021800

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d20:	d115      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x48>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2105      	movs	r1, #5
 8000d42:	201c      	movs	r0, #28
 8000d44:	f000 fc0c 	bl	8001560 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d48:	201c      	movs	r0, #28
 8000d4a:	f000 fc25 	bl	8001598 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <HAL_UART_MspInit+0x84>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12c      	bne.n	8000dd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_UART_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <HAL_UART_MspInit+0x8c>)
 8000dd4:	f000 ff02 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020c00 	.word	0x40020c00

08000dec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e0c:	d13f      	bne.n	8000e8e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a20      	ldr	r2, [pc, #128]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e2a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e3c:	230a      	movs	r3, #10
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4815      	ldr	r0, [pc, #84]	; (8000e9c <HAL_PCD_MspInit+0xb0>)
 8000e48:	f000 fec8 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480e      	ldr	r0, [pc, #56]	; (8000e9c <HAL_PCD_MspInit+0xb0>)
 8000e62:	f000 febb 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6353      	str	r3, [r2, #52]	; 0x34
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_PCD_MspInit+0xac>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000

08000ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	2037      	movs	r0, #55	; 0x37
 8000eb6:	f000 fb53 	bl	8001560 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000eba:	2037      	movs	r0, #55	; 0x37
 8000ebc:	f000 fb6c 	bl	8001598 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_InitTick+0xa4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_InitTick+0xa4>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <HAL_InitTick+0xa4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f003 0320 	and.w	r3, r3, #32
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000edc:	f107 0210 	add.w	r2, r7, #16
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fdf2 	bl	8002ad0 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000eec:	f001 fdc8 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_InitTick+0xa8>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0c9b      	lsrs	r3, r3, #18
 8000f00:	3b01      	subs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_InitTick+0xac>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <HAL_InitTick+0xb0>)
 8000f08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_InitTick+0xac>)
 8000f0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f10:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_InitTick+0xac>)
 8000f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f16:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_InitTick+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_InitTick+0xac>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_InitTick+0xac>)
 8000f26:	f001 fe05 	bl	8002b34 <HAL_TIM_Base_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d104      	bne.n	8000f3a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000f30:	4806      	ldr	r0, [pc, #24]	; (8000f4c <HAL_InitTick+0xac>)
 8000f32:	f001 feb7 	bl	8002ca4 <HAL_TIM_Base_Start_IT>
 8000f36:	4603      	mov	r3, r0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3730      	adds	r7, #48	; 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40023800 	.word	0x40023800
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	2000085c 	.word	0x2000085c
 8000f50:	40001400 	.word	0x40001400

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <TIM2_IRQHandler+0x10>)
 8000f86:	f001 fefd 	bl	8002d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200002b8 	.word	0x200002b8

08000f94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <TIM7_IRQHandler+0x10>)
 8000f9a:	f001 fef3 	bl	8002d84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000085c 	.word	0x2000085c

08000fa8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000fb0:	1d39      	adds	r1, r7, #4
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <__io_putchar+0x20>)
 8000fba:	f002 faf2 	bl	80035a2 <HAL_UART_Transmit>

	return ch;
 8000fbe:	687b      	ldr	r3, [r7, #4]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000300 	.word	0x20000300

08000fcc <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000fd4:	f004 fc46 	bl	8005864 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <vPrintString+0x2c>)
 8000fdc:	f005 f9fc 	bl	80063d8 <iprintf>
		fflush( stdout );
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <vPrintString+0x30>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 ffd0 	bl	8005f8c <fflush>
	}
	taskEXIT_CRITICAL();
 8000fec:	f004 fc6a 	bl	80058c4 <vPortExitCritical>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	080072ec 	.word	0x080072ec
 8000ffc:	20000010 	.word	0x20000010

08001000 <vPrintTwoStrings>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vPrintTwoStrings( const char *pcString1, const char *pcString2 )
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	vTaskSuspendAll();
 800100a:	f003 fd13 	bl	8004a34 <vTaskSuspendAll>
	{
		printf( "At time %lu: %s %s\r\n", xTaskGetTickCount(), pcString1, pcString2 );
 800100e:	f003 fdbb 	bl	8004b88 <xTaskGetTickCount>
 8001012:	4601      	mov	r1, r0
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <vPrintTwoStrings+0x2c>)
 800101a:	f005 f9dd 	bl	80063d8 <iprintf>
	}
	xTaskResumeAll();
 800101e:	f003 fd17 	bl	8004a50 <xTaskResumeAll>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	080072fc 	.word	0x080072fc

08001030 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e00a      	b.n	8001058 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001042:	f3af 8000 	nop.w
 8001046:	4601      	mov	r1, r0
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	60ba      	str	r2, [r7, #8]
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf0      	blt.n	8001042 <_read+0x12>
	}

return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e009      	b.n	8001090 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	60ba      	str	r2, [r7, #8]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff8f 	bl	8000fa8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf1      	blt.n	800107c <_write+0x12>
	}
	return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_close>:

int _close(int file)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ca:	605a      	str	r2, [r3, #4]
	return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <_isatty>:

int _isatty(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
	return 1;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
	return 0;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001114:	4a14      	ldr	r2, [pc, #80]	; (8001168 <_sbrk+0x5c>)
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <_sbrk+0x60>)
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d102      	bne.n	800112e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <_sbrk+0x64>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <_sbrk+0x68>)
 800112c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	429a      	cmp	r2, r3
 800113a:	d207      	bcs.n	800114c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800113c:	f004 fe5e 	bl	8005dfc <__errno>
 8001140:	4603      	mov	r3, r0
 8001142:	220c      	movs	r2, #12
 8001144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800114a:	e009      	b.n	8001160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	4a05      	ldr	r2, [pc, #20]	; (8001170 <_sbrk+0x64>)
 800115c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800115e:	68fb      	ldr	r3, [r7, #12]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20030000 	.word	0x20030000
 800116c:	00000400 	.word	0x00000400
 8001170:	200008a4 	.word	0x200008a4
 8001174:	20004820 	.word	0x20004820

08001178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <SystemInit+0x20>)
 800117e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <SystemInit+0x20>)
 8001184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <vTaskDemo>:
// ------ Public functions -----------------------------------------

/*------------------------------------------------------------------*/
/* Task Function thread */
void vTaskDemo( void *pvParameters )
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	/*  Declare & Initialize Task Function variables */
	volatile unsigned long ulLoopCounter;
	const unsigned long ulMaxLoopCount = 0x1fffUL;
 80011a4:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80011a8:	61fb      	str	r3, [r7, #28]
	TickType_t xLastExecutionTime;

	/* The task will run every 5 milliseconds. */
	const TickType_t xBlockPeriod = pdMS_TO_TICKS( 5UL );
 80011aa:	2305      	movs	r3, #5
 80011ac:	61bb      	str	r3, [r7, #24]

	/* Initialise xLastExecutionTime to the current time.  This is the only
	   time this variable needs to be written to explicitly.  Afterwards it is
	   updated internally within the osDelayUnitl() API function. */
	xLastExecutionTime = xTaskGetTickCount();
 80011ae:	f003 fceb 	bl	8004b88 <xTaskGetTickCount>
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]

	char *pcTaskName = ( char * ) pcTaskGetName( NULL );
 80011b6:	2000      	movs	r0, #0
 80011b8:	f003 fcf6 	bl	8004ba8 <pcTaskGetName>
 80011bc:	6178      	str	r0, [r7, #20]

	/* Print out the name of this task. */
	vPrintTwoStrings( pcTaskName, " - is running\r\n" );
 80011be:	490b      	ldr	r1, [pc, #44]	; (80011ec <vTaskDemo+0x50>)
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	f7ff ff1d 	bl	8001000 <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Wait until it is time to run this task again. */
		vTaskDelayUntil( &xLastExecutionTime, xBlockPeriod );
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	69b9      	ldr	r1, [r7, #24]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 fac7 	bl	8004760 <vTaskDelayUntil>

		/* This loop is just to ensure the task uses up enough processing time
		   to register in the run time statistics. */
		for( ulLoopCounter = 0; ulLoopCounter < ulMaxLoopCount; ulLoopCounter++ )
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	e003      	b.n	80011e0 <vTaskDemo+0x44>
		{
			/* There is nothing to do here.  Just perform a "no operation" to
			   ensure there are some instructions generated. */
			__asm volatile( "NOP " );
 80011d8:	bf00      	nop
		for( ulLoopCounter = 0; ulLoopCounter < ulMaxLoopCount; ulLoopCounter++ )
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	3301      	adds	r3, #1
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <vTaskDemo+0x3c>
		vTaskDelayUntil( &xLastExecutionTime, xBlockPeriod );
 80011e8:	e7ed      	b.n	80011c6 <vTaskDemo+0x2a>
 80011ea:	bf00      	nop
 80011ec:	08007314 	.word	0x08007314

080011f0 <configureTimerForRunTimeStats>:
// ------ Public functions -----------------------------------------
volatile unsigned long ulHighFrequencyTimerTicks;

/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <configureTimerForRunTimeStats+0x14>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start( &htim2 );
 80011fa:	4803      	ldr	r0, [pc, #12]	; (8001208 <configureTimerForRunTimeStats+0x18>)
 80011fc:	f001 fcea 	bl	8002bd4 <HAL_TIM_Base_Start>
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200008a8 	.word	0x200008a8
 8001208:	200002b8 	.word	0x200002b8

0800120c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <getRunTimeCounterValue+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200008a8 	.word	0x200008a8

08001224 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	   called if a stack overflow is detected.
	   https://www.freertos.org/Stacks-and-stack-overflow-checking.html */
	vPrintTwoStrings( " Application Stack Overflow!! on Task:", ( char* )pcTaskName );
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <vApplicationStackOverflowHook+0x2c>)
 8001232:	f7ff fee5 	bl	8001000 <vPrintTwoStrings>

    taskENTER_CRITICAL();
 8001236:	f004 fb15 	bl	8005864 <vPortEnterCritical>
	__asm volatile
 800123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123e:	f383 8811 	msr	BASEPRI, r3
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	f3bf 8f4f 	dsb	sy
 800124a:	60fb      	str	r3, [r7, #12]
}
 800124c:	bf00      	nop
    configASSERT( 0 );   /* hang the execution for debugging purposes */
 800124e:	e7fe      	b.n	800124e <vApplicationStackOverflowHook+0x2a>
 8001250:	08007324 	.word	0x08007324

08001254 <vTaskStats>:
}

/*------------------------------------------------------------------*/
/* Task Function thread */
void vTaskStats( void *pvParameters )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	   is therefore declared static to ensure it is not allocated on the task stack.
	   This makes this function non re-entrant. */
	static char cStringBuffer[ 512 ];

	/* The task will run every 5 seconds. */
	const TickType_t xBlockPeriod = pdMS_TO_TICKS( 5000UL );
 800125c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001260:	617b      	str	r3, [r7, #20]

	/* Initialise xLastExecutionTime to the current time.  This is the only
	   time this variable needs to be written to explicitly.  Afterwards it is
	   updated internally within the osDelayUntil() API function. */
	xLastExecutionTime = xTaskGetTickCount();
 8001262:	f003 fc91 	bl	8004b88 <xTaskGetTickCount>
 8001266:	4603      	mov	r3, r0
 8001268:	60fb      	str	r3, [r7, #12]

	char *pcTaskName = ( char * ) pcTaskGetName( NULL );
 800126a:	2000      	movs	r0, #0
 800126c:	f003 fc9c 	bl	8004ba8 <pcTaskGetName>
 8001270:	6138      	str	r0, [r7, #16]

	/* Print out the name of this task. */
	vPrintTwoStrings( pcTaskName, " - is running\r\n" );
 8001272:	4911      	ldr	r1, [pc, #68]	; (80012b8 <vTaskStats+0x64>)
 8001274:	6938      	ldr	r0, [r7, #16]
 8001276:	f7ff fec3 	bl	8001000 <vPrintTwoStrings>

	/* As per most tasks, this task is implemented in an infinite loop. */
	for( ;; )
	{
		/* Wait until it is time to run this task again. */
		vTaskDelayUntil( &xLastExecutionTime, xBlockPeriod );
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	6979      	ldr	r1, [r7, #20]
 8001280:	4618      	mov	r0, r3
 8001282:	f003 fa6d 	bl	8004760 <vTaskDelayUntil>

		/* Generate a text table from the run time stats.  This must fit into
		the cStringBuffer array.
		https://www.freertos.org/a00021.html#vTaskGetRunTimeStats */
		vTaskGetRunTimeStats( cStringBuffer );
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <vTaskStats+0x68>)
 8001288:	f004 f8d4 	bl	8005434 <vTaskGetRunTimeStats>

		/* Print out column headings for the run time stats table. */
		vPrintString( "\nTask\t\tAbs\t\t%\n" );
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <vTaskStats+0x6c>)
 800128e:	f7ff fe9d 	bl	8000fcc <vPrintString>
		vPrintString( "------------------------------------\n" );
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <vTaskStats+0x70>)
 8001294:	f7ff fe9a 	bl	8000fcc <vPrintString>

		/* Print out the run time stats themselves. */
		/* Shows the amount of time each task has spent in the Running state
		   (how much CPU time each task has consumed). */
		vPrintString( cStringBuffer );
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <vTaskStats+0x68>)
 800129a:	f7ff fe97 	bl	8000fcc <vPrintString>

		/* Generate a text table from the task list. This must fit into
		the cStringBuffer array.
		https://www.freertos.org/a00021.html#vTaskList */
		vTaskList( cStringBuffer );
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <vTaskStats+0x68>)
 80012a0:	f004 f832 	bl	8005308 <vTaskList>

		/* Print out column headings for the task list table. */
		vPrintString( "\nTask\t\tState\tPrior.\tStack\tNum\n" );
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <vTaskStats+0x74>)
 80012a6:	f7ff fe91 	bl	8000fcc <vPrintString>
		vPrintString( "-------------------------------------------\n" );
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <vTaskStats+0x78>)
 80012ac:	f7ff fe8e 	bl	8000fcc <vPrintString>

		/* Print out the run task list themselves. */
		/* Shows the state of each task, including the task's stack high water mark
		   (the smaller the high water mark number the closer the task has come to
		   overflowing its stack). */
		vPrintString( cStringBuffer );
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <vTaskStats+0x68>)
 80012b2:	f7ff fe8b 	bl	8000fcc <vPrintString>
		vTaskDelayUntil( &xLastExecutionTime, xBlockPeriod );
 80012b6:	e7e0      	b.n	800127a <vTaskStats+0x26>
 80012b8:	0800734c 	.word	0x0800734c
 80012bc:	200008ac 	.word	0x200008ac
 80012c0:	0800735c 	.word	0x0800735c
 80012c4:	0800736c 	.word	0x0800736c
 80012c8:	08007394 	.word	0x08007394
 80012cc:	080073b4 	.word	0x080073b4

080012d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001308 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012d8:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012dc:	e002      	b.n	80012e4 <LoopCopyDataInit>

080012de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e2:	3304      	adds	r3, #4

080012e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e8:	d3f9      	bcc.n	80012de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012ec:	4c0b      	ldr	r4, [pc, #44]	; (800131c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f0:	e001      	b.n	80012f6 <LoopFillZerobss>

080012f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f4:	3204      	adds	r2, #4

080012f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f8:	d3fb      	bcc.n	80012f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012fa:	f7ff ff3d 	bl	8001178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fe:	f004 ff4d 	bl	800619c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001302:	f7ff f94f 	bl	80005a4 <main>
  bx  lr    
 8001306:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001308:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001314:	080074d4 	.word	0x080074d4
  ldr r2, =_sbss
 8001318:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800131c:	2000481c 	.word	0x2000481c

08001320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <HAL_Init+0x40>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_Init+0x40>)
 800133a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_Init+0x40>)
 8001346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f8fc 	bl	800154a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f7ff fda4 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fbe8 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	20000aac 	.word	0x20000aac

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000aac 	.word	0x20000aac

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff ffee 	bl	8001390 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffde 	bl	8001390 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	db0b      	blt.n	800147e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f003 021f 	and.w	r2, r3, #31
 800146c:	4907      	ldr	r1, [pc, #28]	; (800148c <__NVIC_EnableIRQ+0x38>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	095b      	lsrs	r3, r3, #5
 8001474:	2001      	movs	r0, #1
 8001476:	fa00 f202 	lsl.w	r2, r0, r2
 800147a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100

08001490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	6039      	str	r1, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	db0a      	blt.n	80014ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	490c      	ldr	r1, [pc, #48]	; (80014dc <__NVIC_SetPriority+0x4c>)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	0112      	lsls	r2, r2, #4
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b8:	e00a      	b.n	80014d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4908      	ldr	r1, [pc, #32]	; (80014e0 <__NVIC_SetPriority+0x50>)
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	3b04      	subs	r3, #4
 80014c8:	0112      	lsls	r2, r2, #4
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	761a      	strb	r2, [r3, #24]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000e100 	.word	0xe000e100
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	; 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f1c3 0307 	rsb	r3, r3, #7
 80014fe:	2b04      	cmp	r3, #4
 8001500:	bf28      	it	cs
 8001502:	2304      	movcs	r3, #4
 8001504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	2b06      	cmp	r3, #6
 800150c:	d902      	bls.n	8001514 <NVIC_EncodePriority+0x30>
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3b03      	subs	r3, #3
 8001512:	e000      	b.n	8001516 <NVIC_EncodePriority+0x32>
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	401a      	ands	r2, r3
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800152c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa01 f303 	lsl.w	r3, r1, r3
 8001536:	43d9      	mvns	r1, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153c:	4313      	orrs	r3, r2
         );
}
 800153e:	4618      	mov	r0, r3
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff4c 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001572:	f7ff ff61 	bl	8001438 <__NVIC_GetPriorityGrouping>
 8001576:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	f7ff ffb1 	bl	80014e4 <NVIC_EncodePriority>
 8001582:	4602      	mov	r2, r0
 8001584:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff80 	bl	8001490 <__NVIC_SetPriority>
}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff54 	bl	8001454 <__NVIC_EnableIRQ>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06c      	b.n	80016a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2223      	movs	r2, #35	; 0x23
 80015d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fad3 	bl	8000b84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_ETH_Init+0xf4>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a30      	ldr	r2, [pc, #192]	; (80016a8 <HAL_ETH_Init+0xf4>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_ETH_Init+0xf4>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_ETH_Init+0xf8>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <HAL_ETH_Init+0xf8>)
 8001600:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001604:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_ETH_Init+0xf8>)
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	4927      	ldr	r1, [pc, #156]	; (80016ac <HAL_ETH_Init+0xf8>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <HAL_ETH_Init+0xf8>)
 8001616:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800162e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001630:	f7ff feae 	bl	8001390 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001636:	e011      	b.n	800165c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001638:	f7ff feaa 	bl	8001390 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001646:	d909      	bls.n	800165c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2204      	movs	r2, #4
 800164c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	22e0      	movs	r2, #224	; 0xe0
 8001654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e021      	b.n	80016a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1e4      	bne.n	8001638 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f944 	bl	80018fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f9eb 	bl	8001a50 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fa41 	bl	8001b02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	461a      	mov	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f9a9 	bl	80019e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2210      	movs	r2, #16
 800169a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40013800 	.word	0x40013800

080016b0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <ETH_SetMACConfig+0x134>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	7c1b      	ldrb	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <ETH_SetMACConfig+0x28>
 80016d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016d6:	e000      	b.n	80016da <ETH_SetMACConfig+0x2a>
 80016d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	7c5b      	ldrb	r3, [r3, #17]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <ETH_SetMACConfig+0x38>
 80016e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016e6:	e000      	b.n	80016ea <ETH_SetMACConfig+0x3a>
 80016e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80016ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80016f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	7fdb      	ldrb	r3, [r3, #31]
 80016f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80016f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80016fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	7f92      	ldrb	r2, [r2, #30]
 8001704:	2a00      	cmp	r2, #0
 8001706:	d102      	bne.n	800170e <ETH_SetMACConfig+0x5e>
 8001708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170c:	e000      	b.n	8001710 <ETH_SetMACConfig+0x60>
 800170e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001710:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7f1b      	ldrb	r3, [r3, #28]
 8001716:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001718:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800171e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	791b      	ldrb	r3, [r3, #4]
 8001724:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001726:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800172e:	2a00      	cmp	r2, #0
 8001730:	d102      	bne.n	8001738 <ETH_SetMACConfig+0x88>
 8001732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001736:	e000      	b.n	800173a <ETH_SetMACConfig+0x8a>
 8001738:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800173a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7bdb      	ldrb	r3, [r3, #15]
 8001740:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001742:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001748:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001750:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001752:	4313      	orrs	r3, r2
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fe1c 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001796:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 800179c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80017a4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80017ac:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80017b4:	4313      	orrs	r3, r2
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fdeb 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	619a      	str	r2, [r3, #24]
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	ff20810f 	.word	0xff20810f

080017e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <ETH_SetDMAConfig+0x110>)
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	7b1b      	ldrb	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <ETH_SetDMAConfig+0x2c>
 800180e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001812:	e000      	b.n	8001816 <ETH_SetDMAConfig+0x2e>
 8001814:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	7b5b      	ldrb	r3, [r3, #13]
 800181a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800181c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	7f52      	ldrb	r2, [r2, #29]
 8001822:	2a00      	cmp	r2, #0
 8001824:	d102      	bne.n	800182c <ETH_SetDMAConfig+0x44>
 8001826:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800182a:	e000      	b.n	800182e <ETH_SetDMAConfig+0x46>
 800182c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800182e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	7b9b      	ldrb	r3, [r3, #14]
 8001834:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001836:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800183c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	7f1b      	ldrb	r3, [r3, #28]
 8001842:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001844:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	7f9b      	ldrb	r3, [r3, #30]
 800184a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800184c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001852:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800185a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800185c:	4313      	orrs	r3, r2
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	461a      	mov	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fd92 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	461a      	mov	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800189c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80018a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80018a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80018b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80018ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80018c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80018ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018dc:	2001      	movs	r0, #1
 80018de:	f7ff fd63 	bl	80013a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ea:	461a      	mov	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	f8de3f23 	.word	0xf8de3f23

080018fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0a6      	sub	sp, #152	; 0x98
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001904:	2301      	movs	r3, #1
 8001906:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800190a:	2301      	movs	r3, #1
 800190c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001938:	2300      	movs	r3, #0
 800193a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001942:	2300      	movs	r3, #0
 8001944:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800195e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001968:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001974:	4619      	mov	r1, r3
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fe9a 	bl	80016b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800197c:	2301      	movs	r3, #1
 800197e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001980:	2301      	movs	r3, #1
 8001982:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001984:	2301      	movs	r3, #1
 8001986:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800198a:	2301      	movs	r3, #1
 800198c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80019be:	2301      	movs	r3, #1
 80019c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	4619      	mov	r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff08 	bl	80017e8 <ETH_SetDMAConfig>
}
 80019d8:	bf00      	nop
 80019da:	3798      	adds	r7, #152	; 0x98
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3305      	adds	r3, #5
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	3204      	adds	r2, #4
 80019f8:	7812      	ldrb	r2, [r2, #0]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <ETH_MACAddressConfig+0x68>)
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	061a      	lsls	r2, r3, #24
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3302      	adds	r3, #2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	041b      	lsls	r3, r3, #16
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	4313      	orrs	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <ETH_MACAddressConfig+0x6c>)
 8001a32:	4413      	add	r3, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	6013      	str	r3, [r2, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40028040 	.word	0x40028040
 8001a4c:	40028044 	.word	0x40028044

08001a50 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	e03e      	b.n	8001adc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68d9      	ldr	r1, [r3, #12]
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	440b      	add	r3, r1
 8001a6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	3206      	adds	r2, #6
 8001a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d80c      	bhi.n	8001ac0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68d9      	ldr	r1, [r3, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	461a      	mov	r2, r3
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	e004      	b.n	8001aca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d9bd      	bls.n	8001a5e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	e046      	b.n	8001b9e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6919      	ldr	r1, [r3, #16]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001b54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	3212      	adds	r2, #18
 8001b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d80c      	bhi.n	8001b8e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6919      	ldr	r1, [r3, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	461a      	mov	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	e004      	b.n	8001b98 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d9b5      	bls.n	8001b10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	60da      	str	r2, [r3, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e177      	b.n	8001ee8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8166 	bne.w	8001ee2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80c0 	beq.w	8001ee2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a65      	ldr	r2, [pc, #404]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a61      	ldr	r2, [pc, #388]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_GPIO_Init+0x32c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d037      	beq.n	8001e1a <HAL_GPIO_Init+0x23e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_GPIO_Init+0x330>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d031      	beq.n	8001e16 <HAL_GPIO_Init+0x23a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_GPIO_Init+0x236>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <HAL_GPIO_Init+0x338>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x232>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a54      	ldr	r2, [pc, #336]	; (8001f18 <HAL_GPIO_Init+0x33c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x22e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a53      	ldr	r2, [pc, #332]	; (8001f1c <HAL_GPIO_Init+0x340>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x22a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x344>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_GPIO_Init+0x348>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <HAL_GPIO_Init+0x34c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_GPIO_Init+0x350>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001df2:	2309      	movs	r3, #9
 8001df4:	e012      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001df6:	230a      	movs	r3, #10
 8001df8:	e010      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	e00e      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00c      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00a      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f ae84 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40022400 	.word	0x40022400
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f68:	b08f      	sub	sp, #60	; 0x3c
 8001f6a:	af0a      	add	r7, sp, #40	; 0x28
 8001f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e10f      	b.n	8002198 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe ff2a 	bl	8000dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 fec9 	bl	8003d4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	687e      	ldr	r6, [r7, #4]
 8001fc4:	466d      	mov	r5, sp
 8001fc6:	f106 0410 	add.w	r4, r6, #16
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fda:	1d33      	adds	r3, r6, #4
 8001fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fde:	6838      	ldr	r0, [r7, #0]
 8001fe0:	f001 fe54 	bl	8003c8c <USB_CoreInit>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d005      	beq.n	8001ff6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0d0      	b.n	8002198 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 feb7 	bl	8003d70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	e04a      	b.n	800209e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	333d      	adds	r3, #61	; 0x3d
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	333c      	adds	r3, #60	; 0x3c
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	b298      	uxth	r0, r3
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3344      	adds	r3, #68	; 0x44
 8002044:	4602      	mov	r2, r0
 8002046:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002048:	7bfa      	ldrb	r2, [r7, #15]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3340      	adds	r3, #64	; 0x40
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3348      	adds	r3, #72	; 0x48
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	334c      	adds	r3, #76	; 0x4c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	3354      	adds	r3, #84	; 0x54
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	3301      	adds	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d3af      	bcc.n	8002008 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e044      	b.n	8002138 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020c0:	2200      	movs	r2, #0
 80020c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	3301      	adds	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	d3b5      	bcc.n	80020ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	687e      	ldr	r6, [r7, #4]
 800214a:	466d      	mov	r5, sp
 800214c:	f106 0410 	add.w	r4, r6, #16
 8002150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002158:	e894 0003 	ldmia.w	r4, {r0, r1}
 800215c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002160:	1d33      	adds	r3, r6, #4
 8002162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f001 fe4f 	bl	8003e08 <USB_DevInit>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e00d      	b.n	8002198 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 f81a 	bl	80041ca <USB_DevDisconnect>

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e267      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d075      	beq.n	80022aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021be:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d00c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b85      	ldr	r3, [pc, #532]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d112      	bne.n	80021fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d6:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e2:	d10b      	bne.n	80021fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4b7e      	ldr	r3, [pc, #504]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d05b      	beq.n	80022a8 <HAL_RCC_OscConfig+0x108>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d157      	bne.n	80022a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e242      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0x74>
 8002206:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xb0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x98>
 800221e:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6f      	ldr	r2, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6c      	ldr	r2, [pc, #432]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xb0>
 8002238:	4b69      	ldr	r3, [pc, #420]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a68      	ldr	r2, [pc, #416]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff f89a 	bl	8001390 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff f896 	bl	8001390 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e207      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5b      	ldr	r3, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xc0>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff f886 	bl	8001390 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff f882 	bl	8001390 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1f3      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b51      	ldr	r3, [pc, #324]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0xe8>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b6:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x152>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1c7      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4937      	ldr	r1, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x244>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff f83b 	bl	8001390 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff f837 	bl	8001390 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1a8      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4925      	ldr	r1, [pc, #148]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_OscConfig+0x244>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff f81a 	bl	8001390 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002360:	f7ff f816 	bl	8001390 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e187      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d036      	beq.n	80023f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x248>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7fe fffa 	bl	8001390 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a0:	f7fe fff6 	bl	8001390 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e167      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80023b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x200>
 80023be:	e01b      	b.n	80023f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x248>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe ffe3 	bl	8001390 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	e00e      	b.n	80023ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ce:	f7fe ffdf 	bl	8001390 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d907      	bls.n	80023ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e150      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	42470000 	.word	0x42470000
 80023e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ea      	bne.n	80023ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8097 	beq.w	8002534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b7d      	ldr	r3, [pc, #500]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a7c      	ldr	r2, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b77      	ldr	r3, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b74      	ldr	r3, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a73      	ldr	r2, [pc, #460]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe ff9f 	bl	8001390 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe ff9b 	bl	8001390 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e10c      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x2ea>
 800247c:	4b64      	ldr	r3, [pc, #400]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x324>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x30c>
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a5e      	ldr	r2, [pc, #376]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x324>
 80024ac:	4b58      	ldr	r3, [pc, #352]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a57      	ldr	r2, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a54      	ldr	r2, [pc, #336]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024be:	f023 0304 	bic.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe ff60 	bl	8001390 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe ff5c 	bl	8001390 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0cb      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	4b49      	ldr	r3, [pc, #292]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ee      	beq.n	80024d4 <HAL_RCC_OscConfig+0x334>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7fe ff4a 	bl	8001390 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe ff46 	bl	8001390 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0b5      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ee      	bne.n	8002500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4a38      	ldr	r2, [pc, #224]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a1 	beq.w	8002680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d05c      	beq.n	8002604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d141      	bne.n	80025d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <HAL_RCC_OscConfig+0x478>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe ff1a 	bl	8001390 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe ff16 	bl	8001390 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e087      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	491b      	ldr	r1, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x478>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7fe feef 	bl	8001390 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7fe feeb 	bl	8001390 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e05c      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x416>
 80025d4:	e054      	b.n	8002680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCC_OscConfig+0x478>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe fed8 	bl	8001390 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fed4 	bl	8001390 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e045      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x444>
 8002602:	e03d      	b.n	8002680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e038      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	40007000 	.word	0x40007000
 8002618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x4ec>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d028      	beq.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d121      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d11a      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800264c:	4013      	ands	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	4293      	cmp	r3, r2
 8002656:	d111      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cc      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 030f 	and.w	r3, r3, #15
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d90c      	bls.n	80026cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d044      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d003      	beq.n	800274e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274a:	2b03      	cmp	r3, #3
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e067      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4934      	ldr	r1, [pc, #208]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe fe06 	bl	8001390 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7fe fe02 	bl	8001390 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e04f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d20c      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fb32 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	08007414 	.word	0x08007414
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002860:	b094      	sub	sp, #80	; 0x50
 8002862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800286c:	2300      	movs	r3, #0
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d00d      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002880:	2b08      	cmp	r3, #8
 8002882:	f200 80e1 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 800288a:	2b04      	cmp	r3, #4
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x3a>
 800288e:	e0db      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002892:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002894:	e0db      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002896:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800289a:	e0d8      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80028bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e0:	0150      	lsls	r0, r2, #5
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4621      	mov	r1, r4
 80028e8:	1a51      	subs	r1, r2, r1
 80028ea:	6139      	str	r1, [r7, #16]
 80028ec:	4629      	mov	r1, r5
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002900:	4659      	mov	r1, fp
 8002902:	018b      	lsls	r3, r1, #6
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800290a:	4651      	mov	r1, sl
 800290c:	018a      	lsls	r2, r1, #6
 800290e:	4651      	mov	r1, sl
 8002910:	ebb2 0801 	subs.w	r8, r2, r1
 8002914:	4659      	mov	r1, fp
 8002916:	eb63 0901 	sbc.w	r9, r3, r1
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292e:	4690      	mov	r8, r2
 8002930:	4699      	mov	r9, r3
 8002932:	4623      	mov	r3, r4
 8002934:	eb18 0303 	adds.w	r3, r8, r3
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	462b      	mov	r3, r5
 800293c:	eb49 0303 	adc.w	r3, r9, r3
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800294e:	4629      	mov	r1, r5
 8002950:	024b      	lsls	r3, r1, #9
 8002952:	4621      	mov	r1, r4
 8002954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002958:	4621      	mov	r1, r4
 800295a:	024a      	lsls	r2, r1, #9
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	2200      	movs	r2, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
 8002966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800296c:	f7fd fc98 	bl	80002a0 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4613      	mov	r3, r2
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002978:	e058      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	2200      	movs	r2, #0
 8002982:	4618      	mov	r0, r3
 8002984:	4611      	mov	r1, r2
 8002986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0159      	lsls	r1, r3, #5
 80029a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a6:	0150      	lsls	r0, r2, #5
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4641      	mov	r1, r8
 80029ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029cc:	ebb2 040a 	subs.w	r4, r2, sl
 80029d0:	eb63 050b 	sbc.w	r5, r3, fp
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	464b      	mov	r3, r9
 80029f0:	eb45 0303 	adc.w	r3, r5, r3
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	61fa      	str	r2, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	f7fd fc3e 	bl	80002a0 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3750      	adds	r7, #80	; 0x50
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	007a1200 	.word	0x007a1200

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08007424 	.word	0x08007424

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aac:	f7ff ffdc 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0b5b      	lsrs	r3, r3, #13
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	08007424 	.word	0x08007424

08002ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	220f      	movs	r2, #15
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae0:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b12:	4b07      	ldr	r3, [pc, #28]	; (8002b30 <HAL_RCC_GetClockConfig+0x60>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 020f 	and.w	r2, r3, #15
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e041      	b.n	8002bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe f8d8 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f000 fafe 	bl	8003174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d001      	beq.n	8002bec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e046      	b.n	8002c7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <HAL_TIM_Base_Start+0xb4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d022      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c06:	d01d      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a1f      	ldr	r2, [pc, #124]	; (8002c8c <HAL_TIM_Base_Start+0xb8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d018      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a1e      	ldr	r2, [pc, #120]	; (8002c90 <HAL_TIM_Base_Start+0xbc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d013      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_TIM_Base_Start+0xc0>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00e      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a1b      	ldr	r2, [pc, #108]	; (8002c98 <HAL_TIM_Base_Start+0xc4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a19      	ldr	r2, [pc, #100]	; (8002c9c <HAL_TIM_Base_Start+0xc8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d004      	beq.n	8002c44 <HAL_TIM_Base_Start+0x70>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_TIM_Base_Start+0xcc>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d111      	bne.n	8002c68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d010      	beq.n	8002c78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c66:	e007      	b.n	8002c78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0201 	orr.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40010400 	.word	0x40010400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40001800 	.word	0x40001800

08002ca4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d001      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e04e      	b.n	8002d5a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <HAL_TIM_Base_Start_IT+0xc4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d022      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d01d      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	; (8002d6c <HAL_TIM_Base_Start_IT+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d018      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <HAL_TIM_Base_Start_IT+0xcc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d013      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d00e      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_TIM_Base_Start_IT+0xd8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x80>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a18      	ldr	r2, [pc, #96]	; (8002d80 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d111      	bne.n	8002d48 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d010      	beq.n	8002d58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d46:	e007      	b.n	8002d58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40001800 	.word	0x40001800

08002d84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0202 	mvn.w	r2, #2
 8002db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f9b5 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9a7 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9b8 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d122      	bne.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0204 	mvn.w	r2, #4
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f98b 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002e20:	e005      	b.n	8002e2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f97d 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f98e 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d122      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d11b      	bne.n	8002e88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f06f 0208 	mvn.w	r2, #8
 8002e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0303 	and.w	r3, r3, #3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f961 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002e74:	e005      	b.n	8002e82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f953 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f964 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d122      	bne.n	8002edc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d11b      	bne.n	8002edc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0210 	mvn.w	r2, #16
 8002eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f937 	bl	8003136 <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f929 	bl	8003122 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f93a 	bl	800314a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d107      	bne.n	8002f08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0201 	mvn.w	r2, #1
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd fdee 	bl	8000ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d10e      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f20:	2b80      	cmp	r3, #128	; 0x80
 8002f22:	d107      	bne.n	8002f34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fae0 	bl	80034f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b40      	cmp	r3, #64	; 0x40
 8002f40:	d10e      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d107      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8ff 	bl	800315e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d10e      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d107      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0220 	mvn.w	r2, #32
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 faaa 	bl	80034e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b4      	b.n	800311a <HAL_TIM_ConfigClockSource+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd4>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x172>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa6>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x11a>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xfa>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x13a>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f000 f9ad 	bl	80033a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f000 f996 	bl	80033a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	461a      	mov	r2, r3
 800309c:	f000 f90a 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 f963 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 f929 	bl	8003312 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	; 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f953 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 f8ea 	bl	80032b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f943 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 f93a 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	; (8003288 <TIM_Base_SetConfig+0x114>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d00f      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3d      	ldr	r2, [pc, #244]	; (800328c <TIM_Base_SetConfig+0x118>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <TIM_Base_SetConfig+0x11c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <TIM_Base_SetConfig+0x120>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x40>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <TIM_Base_SetConfig+0x124>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2f      	ldr	r2, [pc, #188]	; (8003288 <TIM_Base_SetConfig+0x114>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02b      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d027      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2c      	ldr	r2, [pc, #176]	; (800328c <TIM_Base_SetConfig+0x118>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d023      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2b      	ldr	r2, [pc, #172]	; (8003290 <TIM_Base_SetConfig+0x11c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01f      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2a      	ldr	r2, [pc, #168]	; (8003294 <TIM_Base_SetConfig+0x120>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a29      	ldr	r2, [pc, #164]	; (8003298 <TIM_Base_SetConfig+0x124>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <TIM_Base_SetConfig+0x128>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <TIM_Base_SetConfig+0x12c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <TIM_Base_SetConfig+0x130>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <TIM_Base_SetConfig+0x134>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <TIM_Base_SetConfig+0x138>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <TIM_Base_SetConfig+0x13c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <TIM_Base_SetConfig+0x114>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0xf8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a0c      	ldr	r2, [pc, #48]	; (8003298 <TIM_Base_SetConfig+0x124>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40010400 	.word	0x40010400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40001800 	.word	0x40001800
 80032ac:	40001c00 	.word	0x40001c00
 80032b0:	40002000 	.word	0x40002000

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0210 	bic.w	r2, r3, #16
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	f043 0307 	orr.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e05a      	b.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d01d      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1b      	ldr	r2, [pc, #108]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1a      	ldr	r2, [pc, #104]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10c      	bne.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	4313      	orrs	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40001800 	.word	0x40001800

080034e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e03f      	b.n	800359a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fc14 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2224      	movs	r2, #36	; 0x24
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f929 	bl	80037a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	695a      	ldr	r2, [r3, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b08a      	sub	sp, #40	; 0x28
 80035a6:	af02      	add	r7, sp, #8
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d17c      	bne.n	80036bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <HAL_UART_Transmit+0x2c>
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e075      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_UART_Transmit+0x3e>
 80035dc:	2302      	movs	r3, #2
 80035de:	e06e      	b.n	80036be <HAL_UART_Transmit+0x11c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2221      	movs	r2, #33	; 0x21
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f6:	f7fd fecb 	bl	8001390 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	88fa      	ldrh	r2, [r7, #6]
 8003600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003610:	d108      	bne.n	8003624 <HAL_UART_Transmit+0x82>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e003      	b.n	800362c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003628:	2300      	movs	r3, #0
 800362a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003634:	e02a      	b.n	800368c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f840 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e036      	b.n	80036be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	3302      	adds	r3, #2
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e007      	b.n	800367e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	781a      	ldrb	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1cf      	bne.n	8003636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2200      	movs	r2, #0
 800369e:	2140      	movs	r1, #64	; 0x40
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f810 	bl	80036c6 <UART_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e006      	b.n	80036be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b090      	sub	sp, #64	; 0x40
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	603b      	str	r3, [r7, #0]
 80036d2:	4613      	mov	r3, r2
 80036d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	e050      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036de:	d04c      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e6:	f7fd fe53 	bl	8001390 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d241      	bcs.n	800377a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003716:	637a      	str	r2, [r7, #52]	; 0x34
 8003718:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	613b      	str	r3, [r7, #16]
   return(result);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 0301 	bic.w	r3, r3, #1
 8003740:	63bb      	str	r3, [r7, #56]	; 0x38
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	3314      	adds	r3, #20
 8003748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800374a:	623a      	str	r2, [r7, #32]
 800374c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	69f9      	ldr	r1, [r7, #28]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	61bb      	str	r3, [r7, #24]
   return(result);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e00f      	b.n	800379a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	429a      	cmp	r2, r3
 8003796:	d09f      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3740      	adds	r7, #64	; 0x40
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b0c0      	sub	sp, #256	; 0x100
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c0:	68d9      	ldr	r1, [r3, #12]
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	ea40 0301 	orr.w	r3, r0, r1
 80037cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	431a      	orrs	r2, r3
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037fc:	f021 010c 	bic.w	r1, r1, #12
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800380a:	430b      	orrs	r3, r1
 800380c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	6999      	ldr	r1, [r3, #24]
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	ea40 0301 	orr.w	r3, r0, r1
 800382a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <UART_SetConfig+0x2cc>)
 8003834:	429a      	cmp	r2, r3
 8003836:	d005      	beq.n	8003844 <UART_SetConfig+0xa0>
 8003838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b8d      	ldr	r3, [pc, #564]	; (8003a74 <UART_SetConfig+0x2d0>)
 8003840:	429a      	cmp	r2, r3
 8003842:	d104      	bne.n	800384e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003844:	f7ff f930 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003848:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800384c:	e003      	b.n	8003856 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384e:	f7ff f917 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003852:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003860:	f040 810c 	bne.w	8003a7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800386e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003872:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003876:	4622      	mov	r2, r4
 8003878:	462b      	mov	r3, r5
 800387a:	1891      	adds	r1, r2, r2
 800387c:	65b9      	str	r1, [r7, #88]	; 0x58
 800387e:	415b      	adcs	r3, r3
 8003880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003882:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003886:	4621      	mov	r1, r4
 8003888:	eb12 0801 	adds.w	r8, r2, r1
 800388c:	4629      	mov	r1, r5
 800388e:	eb43 0901 	adc.w	r9, r3, r1
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	4623      	mov	r3, r4
 80038ac:	eb18 0303 	adds.w	r3, r8, r3
 80038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038b4:	462b      	mov	r3, r5
 80038b6:	eb49 0303 	adc.w	r3, r9, r3
 80038ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038d2:	460b      	mov	r3, r1
 80038d4:	18db      	adds	r3, r3, r3
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
 80038d8:	4613      	mov	r3, r2
 80038da:	eb42 0303 	adc.w	r3, r2, r3
 80038de:	657b      	str	r3, [r7, #84]	; 0x54
 80038e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038e8:	f7fc fcda 	bl	80002a0 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4b61      	ldr	r3, [pc, #388]	; (8003a78 <UART_SetConfig+0x2d4>)
 80038f2:	fba3 2302 	umull	r2, r3, r3, r2
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	011c      	lsls	r4, r3, #4
 80038fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003904:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003908:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800390c:	4642      	mov	r2, r8
 800390e:	464b      	mov	r3, r9
 8003910:	1891      	adds	r1, r2, r2
 8003912:	64b9      	str	r1, [r7, #72]	; 0x48
 8003914:	415b      	adcs	r3, r3
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800391c:	4641      	mov	r1, r8
 800391e:	eb12 0a01 	adds.w	sl, r2, r1
 8003922:	4649      	mov	r1, r9
 8003924:	eb43 0b01 	adc.w	fp, r3, r1
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003934:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800393c:	4692      	mov	sl, r2
 800393e:	469b      	mov	fp, r3
 8003940:	4643      	mov	r3, r8
 8003942:	eb1a 0303 	adds.w	r3, sl, r3
 8003946:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800394a:	464b      	mov	r3, r9
 800394c:	eb4b 0303 	adc.w	r3, fp, r3
 8003950:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003960:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003968:	460b      	mov	r3, r1
 800396a:	18db      	adds	r3, r3, r3
 800396c:	643b      	str	r3, [r7, #64]	; 0x40
 800396e:	4613      	mov	r3, r2
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	647b      	str	r3, [r7, #68]	; 0x44
 8003976:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800397a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800397e:	f7fc fc8f 	bl	80002a0 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4611      	mov	r1, r2
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <UART_SetConfig+0x2d4>)
 800398a:	fba3 2301 	umull	r2, r3, r3, r1
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2264      	movs	r2, #100	; 0x64
 8003992:	fb02 f303 	mul.w	r3, r2, r3
 8003996:	1acb      	subs	r3, r1, r3
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800399e:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <UART_SetConfig+0x2d4>)
 80039a0:	fba3 2302 	umull	r2, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039ac:	441c      	add	r4, r3
 80039ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039c0:	4642      	mov	r2, r8
 80039c2:	464b      	mov	r3, r9
 80039c4:	1891      	adds	r1, r2, r2
 80039c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c8:	415b      	adcs	r3, r3
 80039ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d0:	4641      	mov	r1, r8
 80039d2:	1851      	adds	r1, r2, r1
 80039d4:	6339      	str	r1, [r7, #48]	; 0x30
 80039d6:	4649      	mov	r1, r9
 80039d8:	414b      	adcs	r3, r1
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039e8:	4659      	mov	r1, fp
 80039ea:	00cb      	lsls	r3, r1, #3
 80039ec:	4651      	mov	r1, sl
 80039ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039f2:	4651      	mov	r1, sl
 80039f4:	00ca      	lsls	r2, r1, #3
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	4603      	mov	r3, r0
 80039fc:	4642      	mov	r2, r8
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a04:	464b      	mov	r3, r9
 8003a06:	460a      	mov	r2, r1
 8003a08:	eb42 0303 	adc.w	r3, r2, r3
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a24:	460b      	mov	r3, r1
 8003a26:	18db      	adds	r3, r3, r3
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	eb42 0303 	adc.w	r3, r2, r3
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a3a:	f7fc fc31 	bl	80002a0 <__aeabi_uldivmod>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <UART_SetConfig+0x2d4>)
 8003a44:	fba3 1302 	umull	r1, r3, r3, r2
 8003a48:	095b      	lsrs	r3, r3, #5
 8003a4a:	2164      	movs	r1, #100	; 0x64
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	3332      	adds	r3, #50	; 0x32
 8003a56:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <UART_SetConfig+0x2d4>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	095b      	lsrs	r3, r3, #5
 8003a5e:	f003 0207 	and.w	r2, r3, #7
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4422      	add	r2, r4
 8003a6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a6c:	e105      	b.n	8003c7a <UART_SetConfig+0x4d6>
 8003a6e:	bf00      	nop
 8003a70:	40011000 	.word	0x40011000
 8003a74:	40011400 	.word	0x40011400
 8003a78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a8e:	4642      	mov	r2, r8
 8003a90:	464b      	mov	r3, r9
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	6239      	str	r1, [r7, #32]
 8003a96:	415b      	adcs	r3, r3
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	1854      	adds	r4, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb43 0501 	adc.w	r5, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	00eb      	lsls	r3, r5, #3
 8003ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab6:	00e2      	lsls	r2, r4, #3
 8003ab8:	4614      	mov	r4, r2
 8003aba:	461d      	mov	r5, r3
 8003abc:	4643      	mov	r3, r8
 8003abe:	18e3      	adds	r3, r4, r3
 8003ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ac4:	464b      	mov	r3, r9
 8003ac6:	eb45 0303 	adc.w	r3, r5, r3
 8003aca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ada:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003aea:	4629      	mov	r1, r5
 8003aec:	008b      	lsls	r3, r1, #2
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af4:	4621      	mov	r1, r4
 8003af6:	008a      	lsls	r2, r1, #2
 8003af8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003afc:	f7fc fbd0 	bl	80002a0 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003b06:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	011c      	lsls	r4, r3, #4
 8003b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b20:	4642      	mov	r2, r8
 8003b22:	464b      	mov	r3, r9
 8003b24:	1891      	adds	r1, r2, r2
 8003b26:	61b9      	str	r1, [r7, #24]
 8003b28:	415b      	adcs	r3, r3
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b30:	4641      	mov	r1, r8
 8003b32:	1851      	adds	r1, r2, r1
 8003b34:	6139      	str	r1, [r7, #16]
 8003b36:	4649      	mov	r1, r9
 8003b38:	414b      	adcs	r3, r1
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b48:	4659      	mov	r1, fp
 8003b4a:	00cb      	lsls	r3, r1, #3
 8003b4c:	4651      	mov	r1, sl
 8003b4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b52:	4651      	mov	r1, sl
 8003b54:	00ca      	lsls	r2, r1, #3
 8003b56:	4610      	mov	r0, r2
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	189b      	adds	r3, r3, r2
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b64:	464b      	mov	r3, r9
 8003b66:	460a      	mov	r2, r1
 8003b68:	eb42 0303 	adc.w	r3, r2, r3
 8003b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b88:	4649      	mov	r1, r9
 8003b8a:	008b      	lsls	r3, r1, #2
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b92:	4641      	mov	r1, r8
 8003b94:	008a      	lsls	r2, r1, #2
 8003b96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b9a:	f7fc fb81 	bl	80002a0 <__aeabi_uldivmod>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4b39      	ldr	r3, [pc, #228]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a34      	ldr	r2, [pc, #208]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc2:	441c      	add	r4, r3
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	673b      	str	r3, [r7, #112]	; 0x70
 8003bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8003bce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	1891      	adds	r1, r2, r2
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	415b      	adcs	r3, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be2:	4641      	mov	r1, r8
 8003be4:	1851      	adds	r1, r2, r1
 8003be6:	6039      	str	r1, [r7, #0]
 8003be8:	4649      	mov	r1, r9
 8003bea:	414b      	adcs	r3, r1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bfa:	4659      	mov	r1, fp
 8003bfc:	00cb      	lsls	r3, r1, #3
 8003bfe:	4651      	mov	r1, sl
 8003c00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c04:	4651      	mov	r1, sl
 8003c06:	00ca      	lsls	r2, r1, #3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4642      	mov	r2, r8
 8003c10:	189b      	adds	r3, r3, r2
 8003c12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c14:	464b      	mov	r3, r9
 8003c16:	460a      	mov	r2, r1
 8003c18:	eb42 0303 	adc.w	r3, r2, r3
 8003c1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
 8003c28:	667a      	str	r2, [r7, #100]	; 0x64
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c36:	4649      	mov	r1, r9
 8003c38:	008b      	lsls	r3, r1, #2
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c40:	4641      	mov	r1, r8
 8003c42:	008a      	lsls	r2, r1, #2
 8003c44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c48:	f7fc fb2a 	bl	80002a0 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003c52:	fba3 1302 	umull	r1, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	2164      	movs	r1, #100	; 0x64
 8003c5a:	fb01 f303 	mul.w	r3, r1, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	3332      	adds	r3, #50	; 0x32
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <UART_SetConfig+0x4e4>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	f003 020f 	and.w	r2, r3, #15
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4422      	add	r2, r4
 8003c78:	609a      	str	r2, [r3, #8]
}
 8003c7a:	bf00      	nop
 8003c7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c80:	46bd      	mov	sp, r7
 8003c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c86:	bf00      	nop
 8003c88:	51eb851f 	.word	0x51eb851f

08003c8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	f107 001c 	add.w	r0, r7, #28
 8003c9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d122      	bne.n	8003cea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d105      	bne.n	8003cde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 faa2 	bl	8004228 <USB_CoreReset>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e01a      	b.n	8003d20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa96 	bl	8004228 <USB_CoreReset>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
 8003d12:	e005      	b.n	8003d20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10b      	bne.n	8003d3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f043 0206 	orr.w	r2, r3, #6
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d4a:	b004      	add	sp, #16
 8003d4c:	4770      	bx	lr

08003d4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d115      	bne.n	8003dbe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f7fd fb02 	bl	80013a8 <HAL_Delay>
      ms++;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa2e 	bl	800420c <USB_GetMode>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d01e      	beq.n	8003df4 <USB_SetCurrentMode+0x84>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b31      	cmp	r3, #49	; 0x31
 8003dba:	d9f0      	bls.n	8003d9e <USB_SetCurrentMode+0x2e>
 8003dbc:	e01a      	b.n	8003df4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d115      	bne.n	8003df0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fd fae9 	bl	80013a8 <HAL_Delay>
      ms++;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa15 	bl	800420c <USB_GetMode>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <USB_SetCurrentMode+0x84>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b31      	cmp	r3, #49	; 0x31
 8003dec:	d9f0      	bls.n	8003dd0 <USB_SetCurrentMode+0x60>
 8003dee:	e001      	b.n	8003df4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e005      	b.n	8003e00 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b32      	cmp	r3, #50	; 0x32
 8003df8:	d101      	bne.n	8003dfe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e08:	b084      	sub	sp, #16
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	e009      	b.n	8003e3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	3340      	adds	r3, #64	; 0x40
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	2200      	movs	r2, #0
 8003e34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b0e      	cmp	r3, #14
 8003e40:	d9f2      	bls.n	8003e28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11c      	bne.n	8003e82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003e80:	e00b      	b.n	8003e9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eac:	4619      	mov	r1, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	680b      	ldr	r3, [r1, #0]
 8003eb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10c      	bne.n	8003eda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f965 	bl	8004198 <USB_SetDevSpeed>
 8003ece:	e008      	b.n	8003ee2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f960 	bl	8004198 <USB_SetDevSpeed>
 8003ed8:	e003      	b.n	8003ee2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003eda:	2103      	movs	r1, #3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f95b 	bl	8004198 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ee2:	2110      	movs	r1, #16
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f8f3 	bl	80040d0 <USB_FlushTxFifo>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f91f 	bl	8004138 <USB_FlushRxFifo>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f16:	461a      	mov	r2, r3
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	461a      	mov	r2, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	e043      	b.n	8003fb6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f44:	d118      	bne.n	8003f78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e013      	b.n	8003f8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e008      	b.n	8003f8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f84:	461a      	mov	r2, r3
 8003f86:	2300      	movs	r3, #0
 8003f88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3b7      	bcc.n	8003f2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	e043      	b.n	800404c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fda:	d118      	bne.n	800400e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10a      	bne.n	8003ff8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e013      	b.n	8004020 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	015a      	lsls	r2, r3, #5
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004004:	461a      	mov	r2, r3
 8004006:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	e008      	b.n	8004020 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2300      	movs	r3, #0
 800401e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	461a      	mov	r2, r3
 800402e:	2300      	movs	r3, #0
 8004030:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	461a      	mov	r2, r3
 8004040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004044:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3301      	adds	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	429a      	cmp	r2, r3
 8004052:	d3b7      	bcc.n	8003fc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004066:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004074:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f043 0210 	orr.w	r2, r3, #16
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <USB_DevInit+0x2c4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f043 0208 	orr.w	r2, r3, #8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c8:	b004      	add	sp, #16
 80040ca:	4770      	bx	lr
 80040cc:	803c3800 	.word	0x803c3800

080040d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040da:	2300      	movs	r3, #0
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3301      	adds	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a13      	ldr	r2, [pc, #76]	; (8004134 <USB_FlushTxFifo+0x64>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d901      	bls.n	80040f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e01b      	b.n	8004128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	daf2      	bge.n	80040de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	019b      	lsls	r3, r3, #6
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a08      	ldr	r2, [pc, #32]	; (8004134 <USB_FlushTxFifo+0x64>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e006      	b.n	8004128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b20      	cmp	r3, #32
 8004124:	d0f0      	beq.n	8004108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	00030d40 	.word	0x00030d40

08004138 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <USB_FlushRxFifo+0x5c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e018      	b.n	8004188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	daf2      	bge.n	8004144 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2210      	movs	r2, #16
 8004166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <USB_FlushRxFifo+0x5c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e006      	b.n	8004188 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b10      	cmp	r3, #16
 8004184:	d0f0      	beq.n	8004168 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	00030d40 	.word	0x00030d40

08004198 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041e4:	f023 0303 	bic.w	r3, r3, #3
 80041e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f8:	f043 0302 	orr.w	r3, r3, #2
 80041fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f003 0301 	and.w	r3, r3, #1
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	3301      	adds	r3, #1
 8004238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a13      	ldr	r2, [pc, #76]	; (800428c <USB_CoreReset+0x64>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e01b      	b.n	800427e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	daf2      	bge.n	8004234 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f043 0201 	orr.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <USB_CoreReset+0x64>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e006      	b.n	800427e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d0f0      	beq.n	800425e <USB_CoreReset+0x36>

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	00030d40 	.word	0x00030d40

08004290 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800429e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a2:	2b84      	cmp	r3, #132	; 0x84
 80042a4:	d005      	beq.n	80042b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	3303      	adds	r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042c4:	f000 fb64 	bl	8004990 <vTaskStartScheduler>
  
  return osOK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	bd80      	pop	{r7, pc}

080042ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d0:	b087      	sub	sp, #28
 80042d2:	af02      	add	r7, sp, #8
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685c      	ldr	r4, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042e4:	b29e      	uxth	r6, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff ffcf 	bl	8004290 <makeFreeRtosPriority>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f107 030c 	add.w	r3, r7, #12
 80042f8:	9301      	str	r3, [sp, #4]
 80042fa:	9200      	str	r2, [sp, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4632      	mov	r2, r6
 8004300:	4629      	mov	r1, r5
 8004302:	4620      	mov	r0, r4
 8004304:	f000 f8d2 	bl	80044ac <xTaskCreate>
 8004308:	4603      	mov	r3, r0
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004312:	68fb      	ldr	r3, [r7, #12]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800431c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <osDelay+0x16>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	e000      	b.n	8004334 <osDelay+0x18>
 8004332:	2301      	movs	r3, #1
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fa91 	bl	800485c <vTaskDelay>
  
  return osOK;
 800433a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f103 0208 	add.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800435c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f103 0208 	add.w	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f103 0208 	add.w	r2, r3, #8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043fc:	d103      	bne.n	8004406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	e00c      	b.n	8004420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3308      	adds	r3, #8
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e002      	b.n	8004414 <vListInsert+0x2e>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d2f6      	bcs.n	800440e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6892      	ldr	r2, [r2, #8]
 800446e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d103      	bne.n	800448c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	1e5a      	subs	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af04      	add	r7, sp, #16
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fab1 	bl	8005a28 <pvPortMalloc>
 80044c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044ce:	20c0      	movs	r0, #192	; 0xc0
 80044d0:	f001 faaa 	bl	8005a28 <pvPortMalloc>
 80044d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
 80044e2:	e005      	b.n	80044f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044e4:	6978      	ldr	r0, [r7, #20]
 80044e6:	f001 fb6b 	bl	8005bc0 <vPortFree>
 80044ea:	e001      	b.n	80044f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d013      	beq.n	800451e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044f6:	88fa      	ldrh	r2, [r7, #6]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9303      	str	r3, [sp, #12]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	9302      	str	r3, [sp, #8]
 8004500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 f80f 	bl	8004530 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004512:	69f8      	ldr	r0, [r7, #28]
 8004514:	f000 f8b6 	bl	8004684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004518:	2301      	movs	r3, #1
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e002      	b.n	8004524 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004522:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004524:	69bb      	ldr	r3, [r7, #24]
	}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
 800453c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	21a5      	movs	r1, #165	; 0xa5
 800454a:	f001 fe5c 	bl	8006206 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004558:	3b01      	subs	r3, #1
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f023 0307 	bic.w	r3, r3, #7
 8004566:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	617b      	str	r3, [r7, #20]
}
 8004584:	bf00      	nop
 8004586:	e7fe      	b.n	8004586 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01f      	beq.n	80045ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e012      	b.n	80045ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	7819      	ldrb	r1, [r3, #0]
 800459c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	4413      	add	r3, r2
 80045a2:	3334      	adds	r3, #52	; 0x34
 80045a4:	460a      	mov	r2, r1
 80045a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d006      	beq.n	80045c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d9e9      	bls.n	8004594 <prvInitialiseNewTask+0x64>
 80045c0:	e000      	b.n	80045c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80045c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045cc:	e003      	b.n	80045d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d901      	bls.n	80045e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045dc:	2306      	movs	r3, #6
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	2200      	movs	r2, #0
 80045f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	3304      	adds	r3, #4
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fec4 	bl	8004384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	3318      	adds	r3, #24
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff febf 	bl	8004384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800460a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	f1c3 0207 	rsb	r2, r3, #7
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	2200      	movs	r2, #0
 8004620:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	2200      	movs	r2, #0
 8004626:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	2200      	movs	r2, #0
 800462e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	3358      	adds	r3, #88	; 0x58
 8004636:	2260      	movs	r2, #96	; 0x60
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fde3 	bl	8006206 <memset>
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <prvInitialiseNewTask+0x148>)
 8004644:	65da      	str	r2, [r3, #92]	; 0x5c
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <prvInitialiseNewTask+0x14c>)
 800464a:	661a      	str	r2, [r3, #96]	; 0x60
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <prvInitialiseNewTask+0x150>)
 8004650:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68f9      	ldr	r1, [r7, #12]
 8004656:	69b8      	ldr	r0, [r7, #24]
 8004658:	f000 ffd6 	bl	8005608 <pxPortInitialiseStack>
 800465c:	4602      	mov	r2, r0
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800466c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800466e:	bf00      	nop
 8004670:	3720      	adds	r7, #32
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0800744c 	.word	0x0800744c
 800467c:	0800746c 	.word	0x0800746c
 8004680:	0800742c 	.word	0x0800742c

08004684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800468c:	f001 f8ea 	bl	8005864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004690:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <prvAddNewTaskToReadyList+0xc0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <prvAddNewTaskToReadyList+0xc0>)
 8004698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800469a:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <prvAddNewTaskToReadyList+0xc4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046a2:	4a29      	ldr	r2, [pc, #164]	; (8004748 <prvAddNewTaskToReadyList+0xc4>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046a8:	4b26      	ldr	r3, [pc, #152]	; (8004744 <prvAddNewTaskToReadyList+0xc0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d110      	bne.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046b0:	f000 fc8c 	bl	8004fcc <prvInitialiseTaskLists>
 80046b4:	e00d      	b.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <prvAddNewTaskToReadyList+0xc8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046be:	4b22      	ldr	r3, [pc, #136]	; (8004748 <prvAddNewTaskToReadyList+0xc4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d802      	bhi.n	80046d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046cc:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046d2:	4b1f      	ldr	r3, [pc, #124]	; (8004750 <prvAddNewTaskToReadyList+0xcc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <prvAddNewTaskToReadyList+0xcc>)
 80046da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046dc:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <prvAddNewTaskToReadyList+0xcc>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	2201      	movs	r2, #1
 80046ea:	409a      	lsls	r2, r3
 80046ec:	4b19      	ldr	r3, [pc, #100]	; (8004754 <prvAddNewTaskToReadyList+0xd0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	4a18      	ldr	r2, [pc, #96]	; (8004754 <prvAddNewTaskToReadyList+0xd0>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <prvAddNewTaskToReadyList+0xd4>)
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7ff fe46 	bl	800439e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004712:	f001 f8d7 	bl	80058c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004716:	4b0d      	ldr	r3, [pc, #52]	; (800474c <prvAddNewTaskToReadyList+0xc8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00e      	beq.n	800473c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <prvAddNewTaskToReadyList+0xc4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	429a      	cmp	r2, r3
 800472a:	d207      	bcs.n	800473c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <prvAddNewTaskToReadyList+0xd8>)
 800472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000bb0 	.word	0x20000bb0
 8004748:	20000ab0 	.word	0x20000ab0
 800474c:	20000bbc 	.word	0x20000bbc
 8004750:	20000bcc 	.word	0x20000bcc
 8004754:	20000bb8 	.word	0x20000bb8
 8004758:	20000ab4 	.word	0x20000ab4
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <vTaskDelayUntil+0x2a>
	__asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	617b      	str	r3, [r7, #20]
}
 8004786:	bf00      	nop
 8004788:	e7fe      	b.n	8004788 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <vTaskDelayUntil+0x46>
	__asm volatile
 8004790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	613b      	str	r3, [r7, #16]
}
 80047a2:	bf00      	nop
 80047a4:	e7fe      	b.n	80047a4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <vTaskDelayUntil+0xf0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <vTaskDelayUntil+0x64>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	60fb      	str	r3, [r7, #12]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80047c4:	f000 f936 	bl	8004a34 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80047c8:	4b22      	ldr	r3, [pc, #136]	; (8004854 <vTaskDelayUntil+0xf4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20b      	bcs.n	80047fa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d211      	bcs.n	8004810 <vTaskDelayUntil+0xb0>
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d90d      	bls.n	8004810 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
 80047f8:	e00a      	b.n	8004810 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	429a      	cmp	r2, r3
 8004802:	d303      	bcc.n	800480c <vTaskDelayUntil+0xac>
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	429a      	cmp	r2, r3
 800480a:	d901      	bls.n	8004810 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	2b00      	cmp	r3, #0
 800481a:	d006      	beq.n	800482a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fe89 	bl	800553c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800482a:	f000 f911 	bl	8004a50 <xTaskResumeAll>
 800482e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d107      	bne.n	8004846 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004836:	4b08      	ldr	r3, [pc, #32]	; (8004858 <vTaskDelayUntil+0xf8>)
 8004838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004846:	bf00      	nop
 8004848:	3728      	adds	r7, #40	; 0x28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000bd8 	.word	0x20000bd8
 8004854:	20000bb4 	.word	0x20000bb4
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d017      	beq.n	800489e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <vTaskDelay+0x60>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <vTaskDelay+0x30>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
}
 8004888:	bf00      	nop
 800488a:	e7fe      	b.n	800488a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800488c:	f000 f8d2 	bl	8004a34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004890:	2100      	movs	r1, #0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fe52 	bl	800553c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004898:	f000 f8da 	bl	8004a50 <xTaskResumeAll>
 800489c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <vTaskDelay+0x64>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000bd8 	.word	0x20000bd8
 80048c0:	e000ed04 	.word	0xe000ed04

080048c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <eTaskGetState+0x28>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	60bb      	str	r3, [r7, #8]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <eTaskGetState+0xb8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d102      	bne.n	80048fc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80048f6:	2300      	movs	r3, #0
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e03a      	b.n	8004972 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80048fc:	f000 ffb2 	bl	8005864 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8004906:	4b1e      	ldr	r3, [pc, #120]	; (8004980 <eTaskGetState+0xbc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800490c:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <eTaskGetState+0xc0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8004912:	f000 ffd7 	bl	80058c4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	d003      	beq.n	8004926 <eTaskGetState+0x62>
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	429a      	cmp	r2, r3
 8004924:	d102      	bne.n	800492c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8004926:	2302      	movs	r3, #2
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e022      	b.n	8004972 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4a16      	ldr	r2, [pc, #88]	; (8004988 <eTaskGetState+0xc4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d112      	bne.n	800495a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d102      	bne.n	800494e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8004948:	2302      	movs	r3, #2
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e011      	b.n	8004972 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800494e:	2303      	movs	r3, #3
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e00e      	b.n	8004972 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8004954:	2302      	movs	r3, #2
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e00b      	b.n	8004972 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <eTaskGetState+0xc8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d002      	beq.n	8004968 <eTaskGetState+0xa4>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8004968:	2304      	movs	r3, #4
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e001      	b.n	8004972 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800496e:	2301      	movs	r3, #1
 8004970:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8004972:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000ab0 	.word	0x20000ab0
 8004980:	20000b68 	.word	0x20000b68
 8004984:	20000b6c 	.word	0x20000b6c
 8004988:	20000b9c 	.word	0x20000b9c
 800498c:	20000b84 	.word	0x20000b84

08004990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004996:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <vTaskStartScheduler+0x84>)
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	2300      	movs	r3, #0
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	491d      	ldr	r1, [pc, #116]	; (8004a18 <vTaskStartScheduler+0x88>)
 80049a4:	481d      	ldr	r0, [pc, #116]	; (8004a1c <vTaskStartScheduler+0x8c>)
 80049a6:	f7ff fd81 	bl	80044ac <xTaskCreate>
 80049aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d11d      	bne.n	80049ee <vTaskStartScheduler+0x5e>
	__asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	60bb      	str	r3, [r7, #8]
}
 80049c4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049c6:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <vTaskStartScheduler+0x90>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3358      	adds	r3, #88	; 0x58
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <vTaskStartScheduler+0x94>)
 80049ce:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049d0:	4b15      	ldr	r3, [pc, #84]	; (8004a28 <vTaskStartScheduler+0x98>)
 80049d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049d8:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <vTaskStartScheduler+0x9c>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049de:	4b14      	ldr	r3, [pc, #80]	; (8004a30 <vTaskStartScheduler+0xa0>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80049e4:	f7fc fc04 	bl	80011f0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049e8:	f000 fe9a 	bl	8005720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049ec:	e00e      	b.n	8004a0c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d10a      	bne.n	8004a0c <vTaskStartScheduler+0x7c>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	607b      	str	r3, [r7, #4]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <vTaskStartScheduler+0x7a>
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000bd4 	.word	0x20000bd4
 8004a18:	080073e4 	.word	0x080073e4
 8004a1c:	08004f9d 	.word	0x08004f9d
 8004a20:	20000ab0 	.word	0x20000ab0
 8004a24:	20000010 	.word	0x20000010
 8004a28:	20000bd0 	.word	0x20000bd0
 8004a2c:	20000bbc 	.word	0x20000bbc
 8004a30:	20000bb4 	.word	0x20000bb4

08004a34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <vTaskSuspendAll+0x18>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a03      	ldr	r2, [pc, #12]	; (8004a4c <vTaskSuspendAll+0x18>)
 8004a40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000bd8 	.word	0x20000bd8

08004a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a5e:	4b41      	ldr	r3, [pc, #260]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <xTaskResumeAll+0x2c>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	603b      	str	r3, [r7, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a7c:	f000 fef2 	bl	8005864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	4a37      	ldr	r2, [pc, #220]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <xTaskResumeAll+0x114>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d161      	bne.n	8004b56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a92:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <xTaskResumeAll+0x118>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d05d      	beq.n	8004b56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a9a:	e02e      	b.n	8004afa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9c:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fcd5 	bl	8004458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fcd0 	bl	8004458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2201      	movs	r2, #1
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <xTaskResumeAll+0x120>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <xTaskResumeAll+0x120>)
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <xTaskResumeAll+0x124>)
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7ff fc5c 	bl	800439e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aea:	4b23      	ldr	r3, [pc, #140]	; (8004b78 <xTaskResumeAll+0x128>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d302      	bcc.n	8004afa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004af4:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1cc      	bne.n	8004a9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b08:	f000 fbb8 	bl	800527c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b0c:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <xTaskResumeAll+0x130>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b18:	f000 f8fa 	bl	8004d10 <xTaskIncrementTick>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f1      	bne.n	8004b18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <xTaskResumeAll+0x130>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <xTaskResumeAll+0x134>)
 8004b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b56:	f000 feb5 	bl	80058c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	20000bd8 	.word	0x20000bd8
 8004b68:	20000bb0 	.word	0x20000bb0
 8004b6c:	20000b70 	.word	0x20000b70
 8004b70:	20000bb8 	.word	0x20000bb8
 8004b74:	20000ab4 	.word	0x20000ab4
 8004b78:	20000ab0 	.word	0x20000ab0
 8004b7c:	20000bc4 	.word	0x20000bc4
 8004b80:	20000bc0 	.word	0x20000bc0
 8004b84:	e000ed04 	.word	0xe000ed04

08004b88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <xTaskGetTickCount+0x1c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b94:	687b      	ldr	r3, [r7, #4]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000bb4 	.word	0x20000bb4

08004ba8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d102      	bne.n	8004bbc <pcTaskGetName+0x14>
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <pcTaskGetName+0x44>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	e000      	b.n	8004bbe <pcTaskGetName+0x16>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <pcTaskGetName+0x34>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60bb      	str	r3, [r7, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3334      	adds	r3, #52	; 0x34
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000ab0 	.word	0x20000ab0

08004bf0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	2307      	movs	r3, #7
 8004c02:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8004c04:	f7ff ff16 	bl	8004a34 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004c08:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <uxTaskGetSystemState+0x108>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d36a      	bcc.n	8004ce8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3b01      	subs	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1898      	adds	r0, r3, r2
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4a32      	ldr	r2, [pc, #200]	; (8004cfc <uxTaskGetSystemState+0x10c>)
 8004c34:	4413      	add	r3, r2
 8004c36:	2201      	movs	r2, #1
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f000 fa9b 	bl	8005174 <prvListTasksWithinSingleList>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e2      	bne.n	8004c12 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <uxTaskGetSystemState+0x110>)
 8004c5e:	6811      	ldr	r1, [r2, #0]
 8004c60:	2202      	movs	r2, #2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa86 	bl	8005174 <prvListTasksWithinSingleList>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	4613      	mov	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a20      	ldr	r2, [pc, #128]	; (8004d04 <uxTaskGetSystemState+0x114>)
 8004c82:	6811      	ldr	r1, [r2, #0]
 8004c84:	2202      	movs	r2, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fa74 	bl	8005174 <prvListTasksWithinSingleList>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	4413      	add	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4613      	mov	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	4918      	ldr	r1, [pc, #96]	; (8004d08 <uxTaskGetSystemState+0x118>)
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fa63 	bl	8005174 <prvListTasksWithinSingleList>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	4910      	ldr	r1, [pc, #64]	; (8004d0c <uxTaskGetSystemState+0x11c>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa52 	bl	8005174 <prvListTasksWithinSingleList>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004cde:	f7fc fa95 	bl	800120c <getRunTimeCounterValue>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8004ce8:	f7ff feb2 	bl	8004a50 <xTaskResumeAll>

		return uxTask;
 8004cec:	697b      	ldr	r3, [r7, #20]
	}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000bb0 	.word	0x20000bb0
 8004cfc:	20000ab4 	.word	0x20000ab4
 8004d00:	20000b68 	.word	0x20000b68
 8004d04:	20000b6c 	.word	0x20000b6c
 8004d08:	20000b84 	.word	0x20000b84
 8004d0c:	20000b9c 	.word	0x20000b9c

08004d10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1a:	4b4e      	ldr	r3, [pc, #312]	; (8004e54 <xTaskIncrementTick+0x144>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f040 808e 	bne.w	8004e40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d24:	4b4c      	ldr	r3, [pc, #304]	; (8004e58 <xTaskIncrementTick+0x148>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d2c:	4a4a      	ldr	r2, [pc, #296]	; (8004e58 <xTaskIncrementTick+0x148>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d120      	bne.n	8004d7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d38:	4b48      	ldr	r3, [pc, #288]	; (8004e5c <xTaskIncrementTick+0x14c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	603b      	str	r3, [r7, #0]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <xTaskIncrementTick+0x46>
 8004d58:	4b40      	ldr	r3, [pc, #256]	; (8004e5c <xTaskIncrementTick+0x14c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <xTaskIncrementTick+0x150>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3e      	ldr	r2, [pc, #248]	; (8004e5c <xTaskIncrementTick+0x14c>)
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4a3e      	ldr	r2, [pc, #248]	; (8004e60 <xTaskIncrementTick+0x150>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b3d      	ldr	r3, [pc, #244]	; (8004e64 <xTaskIncrementTick+0x154>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3301      	adds	r3, #1
 8004d72:	4a3c      	ldr	r2, [pc, #240]	; (8004e64 <xTaskIncrementTick+0x154>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	f000 fa81 	bl	800527c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d7a:	4b3b      	ldr	r3, [pc, #236]	; (8004e68 <xTaskIncrementTick+0x158>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d348      	bcc.n	8004e16 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d84:	4b35      	ldr	r3, [pc, #212]	; (8004e5c <xTaskIncrementTick+0x14c>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8e:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <xTaskIncrementTick+0x158>)
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d94:	601a      	str	r2, [r3, #0]
					break;
 8004d96:	e03e      	b.n	8004e16 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d98:	4b30      	ldr	r3, [pc, #192]	; (8004e5c <xTaskIncrementTick+0x14c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d203      	bcs.n	8004db8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004db0:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <xTaskIncrementTick+0x158>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004db6:	e02e      	b.n	8004e16 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fb4b 	bl	8004458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d004      	beq.n	8004dd4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3318      	adds	r3, #24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fb42 	bl	8004458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	2201      	movs	r2, #1
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	4b23      	ldr	r3, [pc, #140]	; (8004e6c <xTaskIncrementTick+0x15c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <xTaskIncrementTick+0x15c>)
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <xTaskIncrementTick+0x160>)
 8004df4:	441a      	add	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	f7ff face 	bl	800439e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <xTaskIncrementTick+0x164>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d3b9      	bcc.n	8004d84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e10:	2301      	movs	r3, #1
 8004e12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e14:	e7b6      	b.n	8004d84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e16:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <xTaskIncrementTick+0x164>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4914      	ldr	r1, [pc, #80]	; (8004e70 <xTaskIncrementTick+0x160>)
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d901      	bls.n	8004e32 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e32:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <xTaskIncrementTick+0x168>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d007      	beq.n	8004e4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e004      	b.n	8004e4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <xTaskIncrementTick+0x16c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <xTaskIncrementTick+0x16c>)
 8004e48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e4a:	697b      	ldr	r3, [r7, #20]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3718      	adds	r7, #24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000bd8 	.word	0x20000bd8
 8004e58:	20000bb4 	.word	0x20000bb4
 8004e5c:	20000b68 	.word	0x20000b68
 8004e60:	20000b6c 	.word	0x20000b6c
 8004e64:	20000bc8 	.word	0x20000bc8
 8004e68:	20000bd0 	.word	0x20000bd0
 8004e6c:	20000bb8 	.word	0x20000bb8
 8004e70:	20000ab4 	.word	0x20000ab4
 8004e74:	20000ab0 	.word	0x20000ab0
 8004e78:	20000bc4 	.word	0x20000bc4
 8004e7c:	20000bc0 	.word	0x20000bc0

08004e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e86:	4b3d      	ldr	r3, [pc, #244]	; (8004f7c <vTaskSwitchContext+0xfc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e8e:	4b3c      	ldr	r3, [pc, #240]	; (8004f80 <vTaskSwitchContext+0x100>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e94:	e06e      	b.n	8004f74 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8004e96:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <vTaskSwitchContext+0x100>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004e9c:	f7fc f9b6 	bl	800120c <getRunTimeCounterValue>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	4a38      	ldr	r2, [pc, #224]	; (8004f84 <vTaskSwitchContext+0x104>)
 8004ea4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <vTaskSwitchContext+0x104>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4b37      	ldr	r3, [pc, #220]	; (8004f88 <vTaskSwitchContext+0x108>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d909      	bls.n	8004ec6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004eb2:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eb8:	4a32      	ldr	r2, [pc, #200]	; (8004f84 <vTaskSwitchContext+0x104>)
 8004eba:	6810      	ldr	r0, [r2, #0]
 8004ebc:	4a32      	ldr	r2, [pc, #200]	; (8004f88 <vTaskSwitchContext+0x108>)
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	1a82      	subs	r2, r0, r2
 8004ec2:	440a      	add	r2, r1
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <vTaskSwitchContext+0x104>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2f      	ldr	r2, [pc, #188]	; (8004f88 <vTaskSwitchContext+0x108>)
 8004ecc:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004ece:	4b2f      	ldr	r3, [pc, #188]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d808      	bhi.n	8004ef0 <vTaskSwitchContext+0x70>
 8004ede:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	3334      	adds	r3, #52	; 0x34
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fc f99a 	bl	8001224 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef0:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <vTaskSwitchContext+0x110>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	fab3 f383 	clz	r3, r3
 8004efc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	f1c3 031f 	rsb	r3, r3, #31
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	4923      	ldr	r1, [pc, #140]	; (8004f94 <vTaskSwitchContext+0x114>)
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <vTaskSwitchContext+0xb0>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	607b      	str	r3, [r7, #4]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <vTaskSwitchContext+0xae>
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a16      	ldr	r2, [pc, #88]	; (8004f94 <vTaskSwitchContext+0x114>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3308      	adds	r3, #8
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d104      	bne.n	8004f60 <vTaskSwitchContext+0xe0>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004f68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <vTaskSwitchContext+0x10c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3358      	adds	r3, #88	; 0x58
 8004f70:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <vTaskSwitchContext+0x118>)
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000bd8 	.word	0x20000bd8
 8004f80:	20000bc4 	.word	0x20000bc4
 8004f84:	20000be0 	.word	0x20000be0
 8004f88:	20000bdc 	.word	0x20000bdc
 8004f8c:	20000ab0 	.word	0x20000ab0
 8004f90:	20000bb8 	.word	0x20000bb8
 8004f94:	20000ab4 	.word	0x20000ab4
 8004f98:	20000010 	.word	0x20000010

08004f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fa4:	f000 f852 	bl	800504c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvIdleTask+0x28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d9f9      	bls.n	8004fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <prvIdleTask+0x2c>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fc0:	e7f0      	b.n	8004fa4 <prvIdleTask+0x8>
 8004fc2:	bf00      	nop
 8004fc4:	20000ab4 	.word	0x20000ab4
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e00c      	b.n	8004ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <prvInitialiseTaskLists+0x60>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff f9ac 	bl	8004344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d9ef      	bls.n	8004fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ff8:	480d      	ldr	r0, [pc, #52]	; (8005030 <prvInitialiseTaskLists+0x64>)
 8004ffa:	f7ff f9a3 	bl	8004344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ffe:	480d      	ldr	r0, [pc, #52]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005000:	f7ff f9a0 	bl	8004344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005004:	480c      	ldr	r0, [pc, #48]	; (8005038 <prvInitialiseTaskLists+0x6c>)
 8005006:	f7ff f99d 	bl	8004344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800500a:	480c      	ldr	r0, [pc, #48]	; (800503c <prvInitialiseTaskLists+0x70>)
 800500c:	f7ff f99a 	bl	8004344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005010:	480b      	ldr	r0, [pc, #44]	; (8005040 <prvInitialiseTaskLists+0x74>)
 8005012:	f7ff f997 	bl	8004344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <prvInitialiseTaskLists+0x78>)
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <prvInitialiseTaskLists+0x64>)
 800501a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <prvInitialiseTaskLists+0x7c>)
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000ab4 	.word	0x20000ab4
 8005030:	20000b40 	.word	0x20000b40
 8005034:	20000b54 	.word	0x20000b54
 8005038:	20000b70 	.word	0x20000b70
 800503c:	20000b84 	.word	0x20000b84
 8005040:	20000b9c 	.word	0x20000b9c
 8005044:	20000b68 	.word	0x20000b68
 8005048:	20000b6c 	.word	0x20000b6c

0800504c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005052:	e019      	b.n	8005088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005054:	f000 fc06 	bl	8005864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <prvCheckTasksWaitingTermination+0x50>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff f9f7 	bl	8004458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 8005072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800507c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800507e:	f000 fc21 	bl	80058c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f8e4 	bl	8005250 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000b84 	.word	0x20000b84
 80050a0:	20000bb0 	.word	0x20000bb0
 80050a4:	20000b98 	.word	0x20000b98

080050a8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <vTaskGetInfo+0x1a>
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <vTaskGetInfo+0xc8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	e000      	b.n	80050c4 <vTaskGetInfo+0x1c>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	2b05      	cmp	r3, #5
 8005102:	d01a      	beq.n	800513a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8005104:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <vTaskGetInfo+0xc8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	429a      	cmp	r2, r3
 800510c:	d103      	bne.n	8005116 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2200      	movs	r2, #0
 8005112:	731a      	strb	r2, [r3, #12]
 8005114:	e018      	b.n	8005148 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	2b03      	cmp	r3, #3
 8005120:	d112      	bne.n	8005148 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8005122:	f7ff fc87 	bl	8004a34 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2202      	movs	r2, #2
 8005132:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005134:	f7ff fc8c 	bl	8004a50 <xTaskResumeAll>
 8005138:	e006      	b.n	8005148 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff fbc2 	bl	80048c4 <eTaskGetState>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f860 	bl	8005218 <prvTaskCheckFreeStackSpace>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005160:	e002      	b.n	8005168 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	841a      	strh	r2, [r3, #32]
	}
 8005168:	bf00      	nop
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000ab0 	.word	0x20000ab0

08005174 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03f      	beq.n	800520e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	605a      	str	r2, [r3, #4]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	3308      	adds	r3, #8
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d104      	bne.n	80051b2 <prvListTasksWithinSingleList+0x3e>
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	3308      	adds	r3, #8
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d104      	bne.n	80051de <prvListTasksWithinSingleList+0x6a>
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80051e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e8:	4613      	mov	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	461a      	mov	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1899      	adds	r1, r3, r2
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	2201      	movs	r2, #1
 80051fa:	6978      	ldr	r0, [r7, #20]
 80051fc:	f7ff ff54 	bl	80050a8 <vTaskGetInfo>
				uxTask++;
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	3301      	adds	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	d1d5      	bne.n	80051ba <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005210:	4618      	mov	r0, r3
 8005212:	3728      	adds	r7, #40	; 0x28
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005224:	e005      	b.n	8005232 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3301      	adds	r3, #1
 800522a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2ba5      	cmp	r3, #165	; 0xa5
 8005238:	d0f5      	beq.n	8005226 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	b29b      	uxth	r3, r3
	}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3358      	adds	r3, #88	; 0x58
 800525c:	4618      	mov	r0, r3
 800525e:	f001 f8e1 	bl	8006424 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fcaa 	bl	8005bc0 <vPortFree>
			vPortFree( pxTCB );
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fca7 	bl	8005bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <prvResetNextTaskUnblockTime+0x38>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <prvResetNextTaskUnblockTime+0x3c>)
 800528e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005292:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005294:	e008      	b.n	80052a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005296:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <prvResetNextTaskUnblockTime+0x38>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <prvResetNextTaskUnblockTime+0x3c>)
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	20000b68 	.word	0x20000b68
 80052b8:	20000bd0 	.word	0x20000bd0

080052bc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f001 f97a 	bl	80065c2 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fa ff8e 	bl	80001f0 <strlen>
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	e007      	b.n	80052e8 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	2220      	movs	r2, #32
 80052e0:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3301      	adds	r3, #1
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b0e      	cmp	r3, #14
 80052ec:	d9f4      	bls.n	80052d8 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
	}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b089      	sub	sp, #36	; 0x24
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8005316:	4b45      	ldr	r3, [pc, #276]	; (800542c <vTaskList+0x124>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800531c:	4b43      	ldr	r3, [pc, #268]	; (800542c <vTaskList+0x124>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fb7d 	bl	8005a28 <pvPortMalloc>
 800532e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d076      	beq.n	8005424 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8005336:	2200      	movs	r2, #0
 8005338:	68f9      	ldr	r1, [r7, #12]
 800533a:	68b8      	ldr	r0, [r7, #8]
 800533c:	f7ff fc58 	bl	8004bf0 <uxTaskGetSystemState>
 8005340:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e066      	b.n	8005416 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	4613      	mov	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	4413      	add	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	461a      	mov	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4413      	add	r3, r2
 8005358:	7b1b      	ldrb	r3, [r3, #12]
 800535a:	2b04      	cmp	r3, #4
 800535c:	d81b      	bhi.n	8005396 <vTaskList+0x8e>
 800535e:	a201      	add	r2, pc, #4	; (adr r2, 8005364 <vTaskList+0x5c>)
 8005360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005364:	08005379 	.word	0x08005379
 8005368:	0800537f 	.word	0x0800537f
 800536c:	08005385 	.word	0x08005385
 8005370:	0800538b 	.word	0x0800538b
 8005374:	08005391 	.word	0x08005391
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8005378:	2358      	movs	r3, #88	; 0x58
 800537a:	74fb      	strb	r3, [r7, #19]
										break;
 800537c:	e00e      	b.n	800539c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800537e:	2352      	movs	r3, #82	; 0x52
 8005380:	74fb      	strb	r3, [r7, #19]
										break;
 8005382:	e00b      	b.n	800539c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8005384:	2342      	movs	r3, #66	; 0x42
 8005386:	74fb      	strb	r3, [r7, #19]
										break;
 8005388:	e008      	b.n	800539c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800538a:	2353      	movs	r3, #83	; 0x53
 800538c:	74fb      	strb	r3, [r7, #19]
										break;
 800538e:	e005      	b.n	800539c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8005390:	2344      	movs	r3, #68	; 0x44
 8005392:	74fb      	strb	r3, [r7, #19]
										break;
 8005394:	e002      	b.n	800539c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8005396:	2300      	movs	r3, #0
 8005398:	74fb      	strb	r3, [r7, #19]
										break;
 800539a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	461a      	mov	r2, r3
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4413      	add	r3, r2
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff83 	bl	80052bc <prvWriteNameToBuffer>
 80053b6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80053b8:	7cf9      	ldrb	r1, [r7, #19]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	461a      	mov	r2, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	4413      	add	r3, r2
 80053ca:	6918      	ldr	r0, [r3, #16]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	461a      	mov	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4413      	add	r3, r2
 80053dc:	8c1b      	ldrh	r3, [r3, #32]
 80053de:	461c      	mov	r4, r3
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	461a      	mov	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4413      	add	r3, r2
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	9400      	str	r4, [sp, #0]
 80053f6:	4603      	mov	r3, r0
 80053f8:	460a      	mov	r2, r1
 80053fa:	490d      	ldr	r1, [pc, #52]	; (8005430 <vTaskList+0x128>)
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f001 f87d 	bl	80064fc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fa fef4 	bl	80001f0 <strlen>
 8005408:	4602      	mov	r2, r0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3301      	adds	r3, #1
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	429a      	cmp	r2, r3
 800541c:	d394      	bcc.n	8005348 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800541e:	68b8      	ldr	r0, [r7, #8]
 8005420:	f000 fbce 	bl	8005bc0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd90      	pop	{r4, r7, pc}
 800542c:	20000bb0 	.word	0x20000bb0
 8005430:	080073ec 	.word	0x080073ec

08005434 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8005442:	4b3a      	ldr	r3, [pc, #232]	; (800552c <vTaskGetRunTimeStats+0xf8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005448:	4b38      	ldr	r3, [pc, #224]	; (800552c <vTaskGetRunTimeStats+0xf8>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4413      	add	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fae7 	bl	8005a28 <pvPortMalloc>
 800545a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d05f      	beq.n	8005522 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	461a      	mov	r2, r3
 8005468:	69b9      	ldr	r1, [r7, #24]
 800546a:	6978      	ldr	r0, [r7, #20]
 800546c:	f7ff fbc0 	bl	8004bf0 <uxTaskGetSystemState>
 8005470:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a2e      	ldr	r2, [pc, #184]	; (8005530 <vTaskGetRunTimeStats+0xfc>)
 8005476:	fba2 2303 	umull	r2, r3, r2, r3
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d04b      	beq.n	800551c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
 8005488:	e044      	b.n	8005514 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	461a      	mov	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	4613      	mov	r3, r2
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	461a      	mov	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4619      	mov	r1, r3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7ff feff 	bl	80052bc <prvWriteNameToBuffer>
 80054be:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00e      	beq.n	80054e4 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	4613      	mov	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	461a      	mov	r2, r3
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	4413      	add	r3, r2
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4916      	ldr	r1, [pc, #88]	; (8005534 <vTaskGetRunTimeStats+0x100>)
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 f80d 	bl	80064fc <siprintf>
 80054e2:	e00d      	b.n	8005500 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	461a      	mov	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	4413      	add	r3, r2
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	461a      	mov	r2, r3
 80054f8:	490f      	ldr	r1, [pc, #60]	; (8005538 <vTaskGetRunTimeStats+0x104>)
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fffe 	bl	80064fc <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fa fe75 	bl	80001f0 <strlen>
 8005506:	4602      	mov	r2, r0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4413      	add	r3, r2
 800550c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3301      	adds	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	429a      	cmp	r2, r3
 800551a:	d3b6      	bcc.n	800548a <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800551c:	6978      	ldr	r0, [r7, #20]
 800551e:	f000 fb4f 	bl	8005bc0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005522:	bf00      	nop
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000bb0 	.word	0x20000bb0
 8005530:	51eb851f 	.word	0x51eb851f
 8005534:	080073fc 	.word	0x080073fc
 8005538:	08007408 	.word	0x08007408

0800553c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005546:	4b29      	ldr	r3, [pc, #164]	; (80055ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800554c:	4b28      	ldr	r3, [pc, #160]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3304      	adds	r3, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe ff80 	bl	8004458 <uxListRemove>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800555e:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	2201      	movs	r2, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43da      	mvns	r2, r3
 800556c:	4b21      	ldr	r3, [pc, #132]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4013      	ands	r3, r2
 8005572:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005574:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800557c:	d10a      	bne.n	8005594 <prvAddCurrentTaskToDelayedList+0x58>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005584:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	481a      	ldr	r0, [pc, #104]	; (80055f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800558e:	f7fe ff06 	bl	800439e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005592:	e026      	b.n	80055e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800559c:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d209      	bcs.n	80055c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ac:	4b13      	ldr	r3, [pc, #76]	; (80055fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0f      	ldr	r3, [pc, #60]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe ff14 	bl	80043e6 <vListInsert>
}
 80055be:	e010      	b.n	80055e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe ff0a 	bl	80043e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d202      	bcs.n	80055e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055dc:	4a09      	ldr	r2, [pc, #36]	; (8005604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6013      	str	r3, [r2, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000bb4 	.word	0x20000bb4
 80055f0:	20000ab0 	.word	0x20000ab0
 80055f4:	20000bb8 	.word	0x20000bb8
 80055f8:	20000b9c 	.word	0x20000b9c
 80055fc:	20000b6c 	.word	0x20000b6c
 8005600:	20000b68 	.word	0x20000b68
 8005604:	20000bd0 	.word	0x20000bd0

08005608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3b04      	subs	r3, #4
 8005618:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b04      	subs	r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 0201 	bic.w	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3b04      	subs	r3, #4
 8005636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005638:	4a0c      	ldr	r2, [pc, #48]	; (800566c <pxPortInitialiseStack+0x64>)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3b14      	subs	r3, #20
 8005642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3b04      	subs	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f06f 0202 	mvn.w	r2, #2
 8005656:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3b20      	subs	r3, #32
 800565c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	08005671 	.word	0x08005671

08005670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <prvTaskExitError+0x54>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005682:	d00a      	beq.n	800569a <prvTaskExitError+0x2a>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60fb      	str	r3, [r7, #12]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <prvTaskExitError+0x28>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	60bb      	str	r3, [r7, #8]
}
 80056ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056ae:	bf00      	nop
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0fc      	beq.n	80056b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	2000000c 	.word	0x2000000c
	...

080056d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <pxCurrentTCBConst2>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	f380 8809 	msr	PSP, r0
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8811 	msr	BASEPRI, r0
 80056ea:	4770      	bx	lr
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst2>:
 80056f0:	20000ab0 	.word	0x20000ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056f8:	4808      	ldr	r0, [pc, #32]	; (800571c <prvPortStartFirstTask+0x24>)
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f380 8808 	msr	MSP, r0
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8814 	msr	CONTROL, r0
 800570a:	b662      	cpsie	i
 800570c:	b661      	cpsie	f
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	df00      	svc	0
 8005718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800571a:	bf00      	nop
 800571c:	e000ed08 	.word	0xe000ed08

08005720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005726:	4b46      	ldr	r3, [pc, #280]	; (8005840 <xPortStartScheduler+0x120>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <xPortStartScheduler+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10a      	bne.n	8005746 <xPortStartScheduler+0x26>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <xPortStartScheduler+0x128>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x46>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <xPortStartScheduler+0x12c>)
 8005768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	22ff      	movs	r2, #255	; 0xff
 8005776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <xPortStartScheduler+0x130>)
 800578c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <xPortStartScheduler+0x134>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005794:	e009      	b.n	80057aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <xPortStartScheduler+0x134>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <xPortStartScheduler+0x134>)
 800579e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d0ef      	beq.n	8005796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1c3 0307 	rsb	r3, r3, #7
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00a      	beq.n	80057d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <xPortStartScheduler+0x134>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <xPortStartScheduler+0x134>)
 80057e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <xPortStartScheduler+0x134>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <xPortStartScheduler+0x134>)
 80057ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <xPortStartScheduler+0x138>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <xPortStartScheduler+0x138>)
 80057fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <xPortStartScheduler+0x138>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <xPortStartScheduler+0x138>)
 8005808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800580c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800580e:	f000 f8dd 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <xPortStartScheduler+0x13c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005818:	f000 f8fc 	bl	8005a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xPortStartScheduler+0x140>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <xPortStartScheduler+0x140>)
 8005822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005828:	f7ff ff66 	bl	80056f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800582c:	f7ff fb28 	bl	8004e80 <vTaskSwitchContext>
	prvTaskExitError();
 8005830:	f7ff ff1e 	bl	8005670 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000ed00 	.word	0xe000ed00
 8005844:	410fc271 	.word	0x410fc271
 8005848:	410fc270 	.word	0x410fc270
 800584c:	e000e400 	.word	0xe000e400
 8005850:	20000be4 	.word	0x20000be4
 8005854:	20000be8 	.word	0x20000be8
 8005858:	e000ed20 	.word	0xe000ed20
 800585c:	2000000c 	.word	0x2000000c
 8005860:	e000ef34 	.word	0xe000ef34

08005864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <vPortEnterCritical+0x58>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <vPortEnterCritical+0x58>)
 8005886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <vPortEnterCritical+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10f      	bne.n	80058b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortEnterCritical+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortEnterCritical+0x4a>
	}
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	2000000c 	.word	0x2000000c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <vPortExitCritical+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vPortExitCritical+0x24>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vPortExitCritical+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <vPortExitCritical+0x50>)
 80058f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <vPortExitCritical+0x42>
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000000c 	.word	0x2000000c
	...

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7ff fa96 	bl	8004e80 <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	20000ab0 	.word	0x20000ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7ff f9b5 	bl	8004d10 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <SysTick_Handler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <vPortSetupTimerInterrupt+0x44>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000e018 	.word	0xe000e018
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	e000e014 	.word	0xe000e014

08005a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a24 <vPortEnableVFP+0x10>
 8005a18:	6801      	ldr	r1, [r0, #0]
 8005a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a1e:	6001      	str	r1, [r0, #0]
 8005a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed88 	.word	0xe000ed88

08005a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a34:	f7fe fffe 	bl	8004a34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a38:	4b5b      	ldr	r3, [pc, #364]	; (8005ba8 <pvPortMalloc+0x180>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a40:	f000 f920 	bl	8005c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <pvPortMalloc+0x184>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8093 	bne.w	8005b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01d      	beq.n	8005a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a58:	2208      	movs	r2, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d014      	beq.n	8005a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	3308      	adds	r3, #8
 8005a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <pvPortMalloc+0x6c>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	617b      	str	r3, [r7, #20]
}
 8005a90:	bf00      	nop
 8005a92:	e7fe      	b.n	8005a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d06e      	beq.n	8005b78 <pvPortMalloc+0x150>
 8005a9a:	4b45      	ldr	r3, [pc, #276]	; (8005bb0 <pvPortMalloc+0x188>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d869      	bhi.n	8005b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <pvPortMalloc+0x18c>)
 8005aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <pvPortMalloc+0x18c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aae:	e004      	b.n	8005aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d903      	bls.n	8005acc <pvPortMalloc+0xa4>
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f1      	bne.n	8005ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005acc:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <pvPortMalloc+0x180>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d050      	beq.n	8005b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2208      	movs	r2, #8
 8005adc:	4413      	add	r3, r2
 8005ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	6a3b      	ldr	r3, [r7, #32]
 8005ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	1ad2      	subs	r2, r2, r3
 8005af0:	2308      	movs	r3, #8
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d91f      	bls.n	8005b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4413      	add	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <pvPortMalloc+0xf8>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	613b      	str	r3, [r7, #16]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	1ad2      	subs	r2, r2, r3
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b32:	69b8      	ldr	r0, [r7, #24]
 8005b34:	f000 f908 	bl	8005d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b38:	4b1d      	ldr	r3, [pc, #116]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <pvPortMalloc+0x190>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d203      	bcs.n	8005b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b52:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <pvPortMalloc+0x188>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <pvPortMalloc+0x190>)
 8005b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b13      	ldr	r3, [pc, #76]	; (8005bac <pvPortMalloc+0x184>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	431a      	orrs	r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <pvPortMalloc+0x194>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3301      	adds	r3, #1
 8005b74:	4a11      	ldr	r2, [pc, #68]	; (8005bbc <pvPortMalloc+0x194>)
 8005b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b78:	f7fe ff6a 	bl	8004a50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <pvPortMalloc+0x174>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <pvPortMalloc+0x172>
	return pvReturn;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3728      	adds	r7, #40	; 0x28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200047f4 	.word	0x200047f4
 8005bac:	20004808 	.word	0x20004808
 8005bb0:	200047f8 	.word	0x200047f8
 8005bb4:	200047ec 	.word	0x200047ec
 8005bb8:	200047fc 	.word	0x200047fc
 8005bbc:	20004800 	.word	0x20004800

08005bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04d      	beq.n	8005c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bd2:	2308      	movs	r3, #8
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4413      	add	r3, r2
 8005bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <vPortFree+0xb8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <vPortFree+0x44>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	60fb      	str	r3, [r7, #12]
}
 8005c00:	bf00      	nop
 8005c02:	e7fe      	b.n	8005c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <vPortFree+0x62>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60bb      	str	r3, [r7, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <vPortFree+0xb8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01e      	beq.n	8005c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11a      	bne.n	8005c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <vPortFree+0xb8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	401a      	ands	r2, r3
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c48:	f7fe fef4 	bl	8004a34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <vPortFree+0xbc>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4413      	add	r3, r2
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <vPortFree+0xbc>)
 8005c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c5a:	6938      	ldr	r0, [r7, #16]
 8005c5c:	f000 f874 	bl	8005d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c60:	4b07      	ldr	r3, [pc, #28]	; (8005c80 <vPortFree+0xc0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	4a06      	ldr	r2, [pc, #24]	; (8005c80 <vPortFree+0xc0>)
 8005c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c6a:	f7fe fef1 	bl	8004a50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20004808 	.word	0x20004808
 8005c7c:	200047f8 	.word	0x200047f8
 8005c80:	20004804 	.word	0x20004804

08005c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c90:	4b27      	ldr	r3, [pc, #156]	; (8005d30 <prvHeapInit+0xac>)
 8005c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3307      	adds	r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0307 	bic.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <prvHeapInit+0xac>)
 8005cb4:	4413      	add	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cbc:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <prvHeapInit+0xb0>)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cc2:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <prvHeapInit+0xb0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4413      	add	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <prvHeapInit+0xb4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <prvHeapInit+0xb4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	1ad2      	subs	r2, r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <prvHeapInit+0xb4>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <prvHeapInit+0xb8>)
 8005d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <prvHeapInit+0xbc>)
 8005d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d1c:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <prvHeapInit+0xc0>)
 8005d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	20000bec 	.word	0x20000bec
 8005d34:	200047ec 	.word	0x200047ec
 8005d38:	200047f4 	.word	0x200047f4
 8005d3c:	200047fc 	.word	0x200047fc
 8005d40:	200047f8 	.word	0x200047f8
 8005d44:	20004808 	.word	0x20004808

08005d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <prvInsertBlockIntoFreeList+0xac>)
 8005d52:	60fb      	str	r3, [r7, #12]
 8005d54:	e002      	b.n	8005d5c <prvInsertBlockIntoFreeList+0x14>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d8f7      	bhi.n	8005d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4413      	add	r3, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d108      	bne.n	8005d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	441a      	add	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	441a      	add	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d118      	bne.n	8005dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d00d      	beq.n	8005dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	e008      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dc6:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d002      	beq.n	8005de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	200047ec 	.word	0x200047ec
 8005df8:	200047f4 	.word	0x200047f4

08005dfc <__errno>:
 8005dfc:	4b01      	ldr	r3, [pc, #4]	; (8005e04 <__errno+0x8>)
 8005dfe:	6818      	ldr	r0, [r3, #0]
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000010 	.word	0x20000010

08005e08 <__sflush_r>:
 8005e08:	898a      	ldrh	r2, [r1, #12]
 8005e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0e:	4605      	mov	r5, r0
 8005e10:	0710      	lsls	r0, r2, #28
 8005e12:	460c      	mov	r4, r1
 8005e14:	d458      	bmi.n	8005ec8 <__sflush_r+0xc0>
 8005e16:	684b      	ldr	r3, [r1, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	dc05      	bgt.n	8005e28 <__sflush_r+0x20>
 8005e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dc02      	bgt.n	8005e28 <__sflush_r+0x20>
 8005e22:	2000      	movs	r0, #0
 8005e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d0f9      	beq.n	8005e22 <__sflush_r+0x1a>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e34:	682f      	ldr	r7, [r5, #0]
 8005e36:	602b      	str	r3, [r5, #0]
 8005e38:	d032      	beq.n	8005ea0 <__sflush_r+0x98>
 8005e3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	075a      	lsls	r2, r3, #29
 8005e40:	d505      	bpl.n	8005e4e <__sflush_r+0x46>
 8005e42:	6863      	ldr	r3, [r4, #4]
 8005e44:	1ac0      	subs	r0, r0, r3
 8005e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e48:	b10b      	cbz	r3, 8005e4e <__sflush_r+0x46>
 8005e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e4c:	1ac0      	subs	r0, r0, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	4602      	mov	r2, r0
 8005e52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e54:	6a21      	ldr	r1, [r4, #32]
 8005e56:	4628      	mov	r0, r5
 8005e58:	47b0      	blx	r6
 8005e5a:	1c43      	adds	r3, r0, #1
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	d106      	bne.n	8005e6e <__sflush_r+0x66>
 8005e60:	6829      	ldr	r1, [r5, #0]
 8005e62:	291d      	cmp	r1, #29
 8005e64:	d82c      	bhi.n	8005ec0 <__sflush_r+0xb8>
 8005e66:	4a2a      	ldr	r2, [pc, #168]	; (8005f10 <__sflush_r+0x108>)
 8005e68:	40ca      	lsrs	r2, r1
 8005e6a:	07d6      	lsls	r6, r2, #31
 8005e6c:	d528      	bpl.n	8005ec0 <__sflush_r+0xb8>
 8005e6e:	2200      	movs	r2, #0
 8005e70:	6062      	str	r2, [r4, #4]
 8005e72:	04d9      	lsls	r1, r3, #19
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	6022      	str	r2, [r4, #0]
 8005e78:	d504      	bpl.n	8005e84 <__sflush_r+0x7c>
 8005e7a:	1c42      	adds	r2, r0, #1
 8005e7c:	d101      	bne.n	8005e82 <__sflush_r+0x7a>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	b903      	cbnz	r3, 8005e84 <__sflush_r+0x7c>
 8005e82:	6560      	str	r0, [r4, #84]	; 0x54
 8005e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e86:	602f      	str	r7, [r5, #0]
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d0ca      	beq.n	8005e22 <__sflush_r+0x1a>
 8005e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e90:	4299      	cmp	r1, r3
 8005e92:	d002      	beq.n	8005e9a <__sflush_r+0x92>
 8005e94:	4628      	mov	r0, r5
 8005e96:	f000 f9bf 	bl	8006218 <_free_r>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	6360      	str	r0, [r4, #52]	; 0x34
 8005e9e:	e7c1      	b.n	8005e24 <__sflush_r+0x1c>
 8005ea0:	6a21      	ldr	r1, [r4, #32]
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b0      	blx	r6
 8005ea8:	1c41      	adds	r1, r0, #1
 8005eaa:	d1c7      	bne.n	8005e3c <__sflush_r+0x34>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0c4      	beq.n	8005e3c <__sflush_r+0x34>
 8005eb2:	2b1d      	cmp	r3, #29
 8005eb4:	d001      	beq.n	8005eba <__sflush_r+0xb2>
 8005eb6:	2b16      	cmp	r3, #22
 8005eb8:	d101      	bne.n	8005ebe <__sflush_r+0xb6>
 8005eba:	602f      	str	r7, [r5, #0]
 8005ebc:	e7b1      	b.n	8005e22 <__sflush_r+0x1a>
 8005ebe:	89a3      	ldrh	r3, [r4, #12]
 8005ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ec4:	81a3      	strh	r3, [r4, #12]
 8005ec6:	e7ad      	b.n	8005e24 <__sflush_r+0x1c>
 8005ec8:	690f      	ldr	r7, [r1, #16]
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	d0a9      	beq.n	8005e22 <__sflush_r+0x1a>
 8005ece:	0793      	lsls	r3, r2, #30
 8005ed0:	680e      	ldr	r6, [r1, #0]
 8005ed2:	bf08      	it	eq
 8005ed4:	694b      	ldreq	r3, [r1, #20]
 8005ed6:	600f      	str	r7, [r1, #0]
 8005ed8:	bf18      	it	ne
 8005eda:	2300      	movne	r3, #0
 8005edc:	eba6 0807 	sub.w	r8, r6, r7
 8005ee0:	608b      	str	r3, [r1, #8]
 8005ee2:	f1b8 0f00 	cmp.w	r8, #0
 8005ee6:	dd9c      	ble.n	8005e22 <__sflush_r+0x1a>
 8005ee8:	6a21      	ldr	r1, [r4, #32]
 8005eea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005eec:	4643      	mov	r3, r8
 8005eee:	463a      	mov	r2, r7
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	47b0      	blx	r6
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	dc06      	bgt.n	8005f06 <__sflush_r+0xfe>
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f04:	e78e      	b.n	8005e24 <__sflush_r+0x1c>
 8005f06:	4407      	add	r7, r0
 8005f08:	eba8 0800 	sub.w	r8, r8, r0
 8005f0c:	e7e9      	b.n	8005ee2 <__sflush_r+0xda>
 8005f0e:	bf00      	nop
 8005f10:	20400001 	.word	0x20400001

08005f14 <_fflush_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	690b      	ldr	r3, [r1, #16]
 8005f18:	4605      	mov	r5, r0
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	b913      	cbnz	r3, 8005f24 <_fflush_r+0x10>
 8005f1e:	2500      	movs	r5, #0
 8005f20:	4628      	mov	r0, r5
 8005f22:	bd38      	pop	{r3, r4, r5, pc}
 8005f24:	b118      	cbz	r0, 8005f2e <_fflush_r+0x1a>
 8005f26:	6983      	ldr	r3, [r0, #24]
 8005f28:	b90b      	cbnz	r3, 8005f2e <_fflush_r+0x1a>
 8005f2a:	f000 f899 	bl	8006060 <__sinit>
 8005f2e:	4b14      	ldr	r3, [pc, #80]	; (8005f80 <_fflush_r+0x6c>)
 8005f30:	429c      	cmp	r4, r3
 8005f32:	d11b      	bne.n	8005f6c <_fflush_r+0x58>
 8005f34:	686c      	ldr	r4, [r5, #4]
 8005f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ef      	beq.n	8005f1e <_fflush_r+0xa>
 8005f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f40:	07d0      	lsls	r0, r2, #31
 8005f42:	d404      	bmi.n	8005f4e <_fflush_r+0x3a>
 8005f44:	0599      	lsls	r1, r3, #22
 8005f46:	d402      	bmi.n	8005f4e <_fflush_r+0x3a>
 8005f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f4a:	f000 f94c 	bl	80061e6 <__retarget_lock_acquire_recursive>
 8005f4e:	4628      	mov	r0, r5
 8005f50:	4621      	mov	r1, r4
 8005f52:	f7ff ff59 	bl	8005e08 <__sflush_r>
 8005f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f58:	07da      	lsls	r2, r3, #31
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	d4e0      	bmi.n	8005f20 <_fflush_r+0xc>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	059b      	lsls	r3, r3, #22
 8005f62:	d4dd      	bmi.n	8005f20 <_fflush_r+0xc>
 8005f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f66:	f000 f93f 	bl	80061e8 <__retarget_lock_release_recursive>
 8005f6a:	e7d9      	b.n	8005f20 <_fflush_r+0xc>
 8005f6c:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <_fflush_r+0x70>)
 8005f6e:	429c      	cmp	r4, r3
 8005f70:	d101      	bne.n	8005f76 <_fflush_r+0x62>
 8005f72:	68ac      	ldr	r4, [r5, #8]
 8005f74:	e7df      	b.n	8005f36 <_fflush_r+0x22>
 8005f76:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <_fflush_r+0x74>)
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	bf08      	it	eq
 8005f7c:	68ec      	ldreq	r4, [r5, #12]
 8005f7e:	e7da      	b.n	8005f36 <_fflush_r+0x22>
 8005f80:	0800744c 	.word	0x0800744c
 8005f84:	0800746c 	.word	0x0800746c
 8005f88:	0800742c 	.word	0x0800742c

08005f8c <fflush>:
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	b920      	cbnz	r0, 8005f9a <fflush+0xe>
 8005f90:	4b04      	ldr	r3, [pc, #16]	; (8005fa4 <fflush+0x18>)
 8005f92:	4905      	ldr	r1, [pc, #20]	; (8005fa8 <fflush+0x1c>)
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f000 b8e1 	b.w	800615c <_fwalk_reent>
 8005f9a:	4b04      	ldr	r3, [pc, #16]	; (8005fac <fflush+0x20>)
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7ff bfb9 	b.w	8005f14 <_fflush_r>
 8005fa2:	bf00      	nop
 8005fa4:	0800748c 	.word	0x0800748c
 8005fa8:	08005f15 	.word	0x08005f15
 8005fac:	20000010 	.word	0x20000010

08005fb0 <std>:
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	b510      	push	{r4, lr}
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8005fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fbe:	6083      	str	r3, [r0, #8]
 8005fc0:	8181      	strh	r1, [r0, #12]
 8005fc2:	6643      	str	r3, [r0, #100]	; 0x64
 8005fc4:	81c2      	strh	r2, [r0, #14]
 8005fc6:	6183      	str	r3, [r0, #24]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	2208      	movs	r2, #8
 8005fcc:	305c      	adds	r0, #92	; 0x5c
 8005fce:	f000 f91a 	bl	8006206 <memset>
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <std+0x38>)
 8005fd4:	6263      	str	r3, [r4, #36]	; 0x24
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <std+0x3c>)
 8005fd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fda:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <std+0x40>)
 8005fdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fde:	4b05      	ldr	r3, [pc, #20]	; (8005ff4 <std+0x44>)
 8005fe0:	6224      	str	r4, [r4, #32]
 8005fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0800653d 	.word	0x0800653d
 8005fec:	0800655f 	.word	0x0800655f
 8005ff0:	08006597 	.word	0x08006597
 8005ff4:	080065bb 	.word	0x080065bb

08005ff8 <_cleanup_r>:
 8005ff8:	4901      	ldr	r1, [pc, #4]	; (8006000 <_cleanup_r+0x8>)
 8005ffa:	f000 b8af 	b.w	800615c <_fwalk_reent>
 8005ffe:	bf00      	nop
 8006000:	08005f15 	.word	0x08005f15

08006004 <__sfmoreglue>:
 8006004:	b570      	push	{r4, r5, r6, lr}
 8006006:	2268      	movs	r2, #104	; 0x68
 8006008:	1e4d      	subs	r5, r1, #1
 800600a:	4355      	muls	r5, r2
 800600c:	460e      	mov	r6, r1
 800600e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006012:	f000 f96d 	bl	80062f0 <_malloc_r>
 8006016:	4604      	mov	r4, r0
 8006018:	b140      	cbz	r0, 800602c <__sfmoreglue+0x28>
 800601a:	2100      	movs	r1, #0
 800601c:	e9c0 1600 	strd	r1, r6, [r0]
 8006020:	300c      	adds	r0, #12
 8006022:	60a0      	str	r0, [r4, #8]
 8006024:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006028:	f000 f8ed 	bl	8006206 <memset>
 800602c:	4620      	mov	r0, r4
 800602e:	bd70      	pop	{r4, r5, r6, pc}

08006030 <__sfp_lock_acquire>:
 8006030:	4801      	ldr	r0, [pc, #4]	; (8006038 <__sfp_lock_acquire+0x8>)
 8006032:	f000 b8d8 	b.w	80061e6 <__retarget_lock_acquire_recursive>
 8006036:	bf00      	nop
 8006038:	2000480d 	.word	0x2000480d

0800603c <__sfp_lock_release>:
 800603c:	4801      	ldr	r0, [pc, #4]	; (8006044 <__sfp_lock_release+0x8>)
 800603e:	f000 b8d3 	b.w	80061e8 <__retarget_lock_release_recursive>
 8006042:	bf00      	nop
 8006044:	2000480d 	.word	0x2000480d

08006048 <__sinit_lock_acquire>:
 8006048:	4801      	ldr	r0, [pc, #4]	; (8006050 <__sinit_lock_acquire+0x8>)
 800604a:	f000 b8cc 	b.w	80061e6 <__retarget_lock_acquire_recursive>
 800604e:	bf00      	nop
 8006050:	2000480e 	.word	0x2000480e

08006054 <__sinit_lock_release>:
 8006054:	4801      	ldr	r0, [pc, #4]	; (800605c <__sinit_lock_release+0x8>)
 8006056:	f000 b8c7 	b.w	80061e8 <__retarget_lock_release_recursive>
 800605a:	bf00      	nop
 800605c:	2000480e 	.word	0x2000480e

08006060 <__sinit>:
 8006060:	b510      	push	{r4, lr}
 8006062:	4604      	mov	r4, r0
 8006064:	f7ff fff0 	bl	8006048 <__sinit_lock_acquire>
 8006068:	69a3      	ldr	r3, [r4, #24]
 800606a:	b11b      	cbz	r3, 8006074 <__sinit+0x14>
 800606c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006070:	f7ff bff0 	b.w	8006054 <__sinit_lock_release>
 8006074:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006078:	6523      	str	r3, [r4, #80]	; 0x50
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <__sinit+0x68>)
 800607c:	4a13      	ldr	r2, [pc, #76]	; (80060cc <__sinit+0x6c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	62a2      	str	r2, [r4, #40]	; 0x28
 8006082:	42a3      	cmp	r3, r4
 8006084:	bf04      	itt	eq
 8006086:	2301      	moveq	r3, #1
 8006088:	61a3      	streq	r3, [r4, #24]
 800608a:	4620      	mov	r0, r4
 800608c:	f000 f820 	bl	80060d0 <__sfp>
 8006090:	6060      	str	r0, [r4, #4]
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f81c 	bl	80060d0 <__sfp>
 8006098:	60a0      	str	r0, [r4, #8]
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f818 	bl	80060d0 <__sfp>
 80060a0:	2200      	movs	r2, #0
 80060a2:	60e0      	str	r0, [r4, #12]
 80060a4:	2104      	movs	r1, #4
 80060a6:	6860      	ldr	r0, [r4, #4]
 80060a8:	f7ff ff82 	bl	8005fb0 <std>
 80060ac:	68a0      	ldr	r0, [r4, #8]
 80060ae:	2201      	movs	r2, #1
 80060b0:	2109      	movs	r1, #9
 80060b2:	f7ff ff7d 	bl	8005fb0 <std>
 80060b6:	68e0      	ldr	r0, [r4, #12]
 80060b8:	2202      	movs	r2, #2
 80060ba:	2112      	movs	r1, #18
 80060bc:	f7ff ff78 	bl	8005fb0 <std>
 80060c0:	2301      	movs	r3, #1
 80060c2:	61a3      	str	r3, [r4, #24]
 80060c4:	e7d2      	b.n	800606c <__sinit+0xc>
 80060c6:	bf00      	nop
 80060c8:	0800748c 	.word	0x0800748c
 80060cc:	08005ff9 	.word	0x08005ff9

080060d0 <__sfp>:
 80060d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d2:	4607      	mov	r7, r0
 80060d4:	f7ff ffac 	bl	8006030 <__sfp_lock_acquire>
 80060d8:	4b1e      	ldr	r3, [pc, #120]	; (8006154 <__sfp+0x84>)
 80060da:	681e      	ldr	r6, [r3, #0]
 80060dc:	69b3      	ldr	r3, [r6, #24]
 80060de:	b913      	cbnz	r3, 80060e6 <__sfp+0x16>
 80060e0:	4630      	mov	r0, r6
 80060e2:	f7ff ffbd 	bl	8006060 <__sinit>
 80060e6:	3648      	adds	r6, #72	; 0x48
 80060e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	d503      	bpl.n	80060f8 <__sfp+0x28>
 80060f0:	6833      	ldr	r3, [r6, #0]
 80060f2:	b30b      	cbz	r3, 8006138 <__sfp+0x68>
 80060f4:	6836      	ldr	r6, [r6, #0]
 80060f6:	e7f7      	b.n	80060e8 <__sfp+0x18>
 80060f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060fc:	b9d5      	cbnz	r5, 8006134 <__sfp+0x64>
 80060fe:	4b16      	ldr	r3, [pc, #88]	; (8006158 <__sfp+0x88>)
 8006100:	60e3      	str	r3, [r4, #12]
 8006102:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006106:	6665      	str	r5, [r4, #100]	; 0x64
 8006108:	f000 f86c 	bl	80061e4 <__retarget_lock_init_recursive>
 800610c:	f7ff ff96 	bl	800603c <__sfp_lock_release>
 8006110:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006114:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006118:	6025      	str	r5, [r4, #0]
 800611a:	61a5      	str	r5, [r4, #24]
 800611c:	2208      	movs	r2, #8
 800611e:	4629      	mov	r1, r5
 8006120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006124:	f000 f86f 	bl	8006206 <memset>
 8006128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800612c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006130:	4620      	mov	r0, r4
 8006132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006134:	3468      	adds	r4, #104	; 0x68
 8006136:	e7d9      	b.n	80060ec <__sfp+0x1c>
 8006138:	2104      	movs	r1, #4
 800613a:	4638      	mov	r0, r7
 800613c:	f7ff ff62 	bl	8006004 <__sfmoreglue>
 8006140:	4604      	mov	r4, r0
 8006142:	6030      	str	r0, [r6, #0]
 8006144:	2800      	cmp	r0, #0
 8006146:	d1d5      	bne.n	80060f4 <__sfp+0x24>
 8006148:	f7ff ff78 	bl	800603c <__sfp_lock_release>
 800614c:	230c      	movs	r3, #12
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	e7ee      	b.n	8006130 <__sfp+0x60>
 8006152:	bf00      	nop
 8006154:	0800748c 	.word	0x0800748c
 8006158:	ffff0001 	.word	0xffff0001

0800615c <_fwalk_reent>:
 800615c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006160:	4606      	mov	r6, r0
 8006162:	4688      	mov	r8, r1
 8006164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006168:	2700      	movs	r7, #0
 800616a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800616e:	f1b9 0901 	subs.w	r9, r9, #1
 8006172:	d505      	bpl.n	8006180 <_fwalk_reent+0x24>
 8006174:	6824      	ldr	r4, [r4, #0]
 8006176:	2c00      	cmp	r4, #0
 8006178:	d1f7      	bne.n	800616a <_fwalk_reent+0xe>
 800617a:	4638      	mov	r0, r7
 800617c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006180:	89ab      	ldrh	r3, [r5, #12]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d907      	bls.n	8006196 <_fwalk_reent+0x3a>
 8006186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800618a:	3301      	adds	r3, #1
 800618c:	d003      	beq.n	8006196 <_fwalk_reent+0x3a>
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	47c0      	blx	r8
 8006194:	4307      	orrs	r7, r0
 8006196:	3568      	adds	r5, #104	; 0x68
 8006198:	e7e9      	b.n	800616e <_fwalk_reent+0x12>
	...

0800619c <__libc_init_array>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4d0d      	ldr	r5, [pc, #52]	; (80061d4 <__libc_init_array+0x38>)
 80061a0:	4c0d      	ldr	r4, [pc, #52]	; (80061d8 <__libc_init_array+0x3c>)
 80061a2:	1b64      	subs	r4, r4, r5
 80061a4:	10a4      	asrs	r4, r4, #2
 80061a6:	2600      	movs	r6, #0
 80061a8:	42a6      	cmp	r6, r4
 80061aa:	d109      	bne.n	80061c0 <__libc_init_array+0x24>
 80061ac:	4d0b      	ldr	r5, [pc, #44]	; (80061dc <__libc_init_array+0x40>)
 80061ae:	4c0c      	ldr	r4, [pc, #48]	; (80061e0 <__libc_init_array+0x44>)
 80061b0:	f001 f846 	bl	8007240 <_init>
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	2600      	movs	r6, #0
 80061ba:	42a6      	cmp	r6, r4
 80061bc:	d105      	bne.n	80061ca <__libc_init_array+0x2e>
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c4:	4798      	blx	r3
 80061c6:	3601      	adds	r6, #1
 80061c8:	e7ee      	b.n	80061a8 <__libc_init_array+0xc>
 80061ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ce:	4798      	blx	r3
 80061d0:	3601      	adds	r6, #1
 80061d2:	e7f2      	b.n	80061ba <__libc_init_array+0x1e>
 80061d4:	080074cc 	.word	0x080074cc
 80061d8:	080074cc 	.word	0x080074cc
 80061dc:	080074cc 	.word	0x080074cc
 80061e0:	080074d0 	.word	0x080074d0

080061e4 <__retarget_lock_init_recursive>:
 80061e4:	4770      	bx	lr

080061e6 <__retarget_lock_acquire_recursive>:
 80061e6:	4770      	bx	lr

080061e8 <__retarget_lock_release_recursive>:
 80061e8:	4770      	bx	lr

080061ea <memcpy>:
 80061ea:	440a      	add	r2, r1
 80061ec:	4291      	cmp	r1, r2
 80061ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80061f2:	d100      	bne.n	80061f6 <memcpy+0xc>
 80061f4:	4770      	bx	lr
 80061f6:	b510      	push	{r4, lr}
 80061f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006200:	4291      	cmp	r1, r2
 8006202:	d1f9      	bne.n	80061f8 <memcpy+0xe>
 8006204:	bd10      	pop	{r4, pc}

08006206 <memset>:
 8006206:	4402      	add	r2, r0
 8006208:	4603      	mov	r3, r0
 800620a:	4293      	cmp	r3, r2
 800620c:	d100      	bne.n	8006210 <memset+0xa>
 800620e:	4770      	bx	lr
 8006210:	f803 1b01 	strb.w	r1, [r3], #1
 8006214:	e7f9      	b.n	800620a <memset+0x4>
	...

08006218 <_free_r>:
 8006218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800621a:	2900      	cmp	r1, #0
 800621c:	d044      	beq.n	80062a8 <_free_r+0x90>
 800621e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006222:	9001      	str	r0, [sp, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f1a1 0404 	sub.w	r4, r1, #4
 800622a:	bfb8      	it	lt
 800622c:	18e4      	addlt	r4, r4, r3
 800622e:	f000 fa05 	bl	800663c <__malloc_lock>
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <_free_r+0x94>)
 8006234:	9801      	ldr	r0, [sp, #4]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	b933      	cbnz	r3, 8006248 <_free_r+0x30>
 800623a:	6063      	str	r3, [r4, #4]
 800623c:	6014      	str	r4, [r2, #0]
 800623e:	b003      	add	sp, #12
 8006240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006244:	f000 ba00 	b.w	8006648 <__malloc_unlock>
 8006248:	42a3      	cmp	r3, r4
 800624a:	d908      	bls.n	800625e <_free_r+0x46>
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	1961      	adds	r1, r4, r5
 8006250:	428b      	cmp	r3, r1
 8006252:	bf01      	itttt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	1949      	addeq	r1, r1, r5
 800625a:	6021      	streq	r1, [r4, #0]
 800625c:	e7ed      	b.n	800623a <_free_r+0x22>
 800625e:	461a      	mov	r2, r3
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	b10b      	cbz	r3, 8006268 <_free_r+0x50>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d9fa      	bls.n	800625e <_free_r+0x46>
 8006268:	6811      	ldr	r1, [r2, #0]
 800626a:	1855      	adds	r5, r2, r1
 800626c:	42a5      	cmp	r5, r4
 800626e:	d10b      	bne.n	8006288 <_free_r+0x70>
 8006270:	6824      	ldr	r4, [r4, #0]
 8006272:	4421      	add	r1, r4
 8006274:	1854      	adds	r4, r2, r1
 8006276:	42a3      	cmp	r3, r4
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	d1e0      	bne.n	800623e <_free_r+0x26>
 800627c:	681c      	ldr	r4, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	4421      	add	r1, r4
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	e7da      	b.n	800623e <_free_r+0x26>
 8006288:	d902      	bls.n	8006290 <_free_r+0x78>
 800628a:	230c      	movs	r3, #12
 800628c:	6003      	str	r3, [r0, #0]
 800628e:	e7d6      	b.n	800623e <_free_r+0x26>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	1961      	adds	r1, r4, r5
 8006294:	428b      	cmp	r3, r1
 8006296:	bf04      	itt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	bf04      	itt	eq
 80062a0:	1949      	addeq	r1, r1, r5
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	6054      	str	r4, [r2, #4]
 80062a6:	e7ca      	b.n	800623e <_free_r+0x26>
 80062a8:	b003      	add	sp, #12
 80062aa:	bd30      	pop	{r4, r5, pc}
 80062ac:	20004810 	.word	0x20004810

080062b0 <sbrk_aligned>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	4e0e      	ldr	r6, [pc, #56]	; (80062ec <sbrk_aligned+0x3c>)
 80062b4:	460c      	mov	r4, r1
 80062b6:	6831      	ldr	r1, [r6, #0]
 80062b8:	4605      	mov	r5, r0
 80062ba:	b911      	cbnz	r1, 80062c2 <sbrk_aligned+0x12>
 80062bc:	f000 f90e 	bl	80064dc <_sbrk_r>
 80062c0:	6030      	str	r0, [r6, #0]
 80062c2:	4621      	mov	r1, r4
 80062c4:	4628      	mov	r0, r5
 80062c6:	f000 f909 	bl	80064dc <_sbrk_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d00a      	beq.n	80062e4 <sbrk_aligned+0x34>
 80062ce:	1cc4      	adds	r4, r0, #3
 80062d0:	f024 0403 	bic.w	r4, r4, #3
 80062d4:	42a0      	cmp	r0, r4
 80062d6:	d007      	beq.n	80062e8 <sbrk_aligned+0x38>
 80062d8:	1a21      	subs	r1, r4, r0
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 f8fe 	bl	80064dc <_sbrk_r>
 80062e0:	3001      	adds	r0, #1
 80062e2:	d101      	bne.n	80062e8 <sbrk_aligned+0x38>
 80062e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80062e8:	4620      	mov	r0, r4
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	20004814 	.word	0x20004814

080062f0 <_malloc_r>:
 80062f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f4:	1ccd      	adds	r5, r1, #3
 80062f6:	f025 0503 	bic.w	r5, r5, #3
 80062fa:	3508      	adds	r5, #8
 80062fc:	2d0c      	cmp	r5, #12
 80062fe:	bf38      	it	cc
 8006300:	250c      	movcc	r5, #12
 8006302:	2d00      	cmp	r5, #0
 8006304:	4607      	mov	r7, r0
 8006306:	db01      	blt.n	800630c <_malloc_r+0x1c>
 8006308:	42a9      	cmp	r1, r5
 800630a:	d905      	bls.n	8006318 <_malloc_r+0x28>
 800630c:	230c      	movs	r3, #12
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	2600      	movs	r6, #0
 8006312:	4630      	mov	r0, r6
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	4e2e      	ldr	r6, [pc, #184]	; (80063d4 <_malloc_r+0xe4>)
 800631a:	f000 f98f 	bl	800663c <__malloc_lock>
 800631e:	6833      	ldr	r3, [r6, #0]
 8006320:	461c      	mov	r4, r3
 8006322:	bb34      	cbnz	r4, 8006372 <_malloc_r+0x82>
 8006324:	4629      	mov	r1, r5
 8006326:	4638      	mov	r0, r7
 8006328:	f7ff ffc2 	bl	80062b0 <sbrk_aligned>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	4604      	mov	r4, r0
 8006330:	d14d      	bne.n	80063ce <_malloc_r+0xde>
 8006332:	6834      	ldr	r4, [r6, #0]
 8006334:	4626      	mov	r6, r4
 8006336:	2e00      	cmp	r6, #0
 8006338:	d140      	bne.n	80063bc <_malloc_r+0xcc>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	4631      	mov	r1, r6
 800633e:	4638      	mov	r0, r7
 8006340:	eb04 0803 	add.w	r8, r4, r3
 8006344:	f000 f8ca 	bl	80064dc <_sbrk_r>
 8006348:	4580      	cmp	r8, r0
 800634a:	d13a      	bne.n	80063c2 <_malloc_r+0xd2>
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	3503      	adds	r5, #3
 8006350:	1a6d      	subs	r5, r5, r1
 8006352:	f025 0503 	bic.w	r5, r5, #3
 8006356:	3508      	adds	r5, #8
 8006358:	2d0c      	cmp	r5, #12
 800635a:	bf38      	it	cc
 800635c:	250c      	movcc	r5, #12
 800635e:	4629      	mov	r1, r5
 8006360:	4638      	mov	r0, r7
 8006362:	f7ff ffa5 	bl	80062b0 <sbrk_aligned>
 8006366:	3001      	adds	r0, #1
 8006368:	d02b      	beq.n	80063c2 <_malloc_r+0xd2>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	442b      	add	r3, r5
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	e00e      	b.n	8006390 <_malloc_r+0xa0>
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	1b52      	subs	r2, r2, r5
 8006376:	d41e      	bmi.n	80063b6 <_malloc_r+0xc6>
 8006378:	2a0b      	cmp	r2, #11
 800637a:	d916      	bls.n	80063aa <_malloc_r+0xba>
 800637c:	1961      	adds	r1, r4, r5
 800637e:	42a3      	cmp	r3, r4
 8006380:	6025      	str	r5, [r4, #0]
 8006382:	bf18      	it	ne
 8006384:	6059      	strne	r1, [r3, #4]
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	bf08      	it	eq
 800638a:	6031      	streq	r1, [r6, #0]
 800638c:	5162      	str	r2, [r4, r5]
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	4638      	mov	r0, r7
 8006392:	f104 060b 	add.w	r6, r4, #11
 8006396:	f000 f957 	bl	8006648 <__malloc_unlock>
 800639a:	f026 0607 	bic.w	r6, r6, #7
 800639e:	1d23      	adds	r3, r4, #4
 80063a0:	1af2      	subs	r2, r6, r3
 80063a2:	d0b6      	beq.n	8006312 <_malloc_r+0x22>
 80063a4:	1b9b      	subs	r3, r3, r6
 80063a6:	50a3      	str	r3, [r4, r2]
 80063a8:	e7b3      	b.n	8006312 <_malloc_r+0x22>
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	bf0c      	ite	eq
 80063b0:	6032      	streq	r2, [r6, #0]
 80063b2:	605a      	strne	r2, [r3, #4]
 80063b4:	e7ec      	b.n	8006390 <_malloc_r+0xa0>
 80063b6:	4623      	mov	r3, r4
 80063b8:	6864      	ldr	r4, [r4, #4]
 80063ba:	e7b2      	b.n	8006322 <_malloc_r+0x32>
 80063bc:	4634      	mov	r4, r6
 80063be:	6876      	ldr	r6, [r6, #4]
 80063c0:	e7b9      	b.n	8006336 <_malloc_r+0x46>
 80063c2:	230c      	movs	r3, #12
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	4638      	mov	r0, r7
 80063c8:	f000 f93e 	bl	8006648 <__malloc_unlock>
 80063cc:	e7a1      	b.n	8006312 <_malloc_r+0x22>
 80063ce:	6025      	str	r5, [r4, #0]
 80063d0:	e7de      	b.n	8006390 <_malloc_r+0xa0>
 80063d2:	bf00      	nop
 80063d4:	20004810 	.word	0x20004810

080063d8 <iprintf>:
 80063d8:	b40f      	push	{r0, r1, r2, r3}
 80063da:	4b0a      	ldr	r3, [pc, #40]	; (8006404 <iprintf+0x2c>)
 80063dc:	b513      	push	{r0, r1, r4, lr}
 80063de:	681c      	ldr	r4, [r3, #0]
 80063e0:	b124      	cbz	r4, 80063ec <iprintf+0x14>
 80063e2:	69a3      	ldr	r3, [r4, #24]
 80063e4:	b913      	cbnz	r3, 80063ec <iprintf+0x14>
 80063e6:	4620      	mov	r0, r4
 80063e8:	f7ff fe3a 	bl	8006060 <__sinit>
 80063ec:	ab05      	add	r3, sp, #20
 80063ee:	9a04      	ldr	r2, [sp, #16]
 80063f0:	68a1      	ldr	r1, [r4, #8]
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	4620      	mov	r0, r4
 80063f6:	f000 fab3 	bl	8006960 <_vfiprintf_r>
 80063fa:	b002      	add	sp, #8
 80063fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006400:	b004      	add	sp, #16
 8006402:	4770      	bx	lr
 8006404:	20000010 	.word	0x20000010

08006408 <cleanup_glue>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	460c      	mov	r4, r1
 800640c:	6809      	ldr	r1, [r1, #0]
 800640e:	4605      	mov	r5, r0
 8006410:	b109      	cbz	r1, 8006416 <cleanup_glue+0xe>
 8006412:	f7ff fff9 	bl	8006408 <cleanup_glue>
 8006416:	4621      	mov	r1, r4
 8006418:	4628      	mov	r0, r5
 800641a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800641e:	f7ff befb 	b.w	8006218 <_free_r>
	...

08006424 <_reclaim_reent>:
 8006424:	4b2c      	ldr	r3, [pc, #176]	; (80064d8 <_reclaim_reent+0xb4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4283      	cmp	r3, r0
 800642a:	b570      	push	{r4, r5, r6, lr}
 800642c:	4604      	mov	r4, r0
 800642e:	d051      	beq.n	80064d4 <_reclaim_reent+0xb0>
 8006430:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006432:	b143      	cbz	r3, 8006446 <_reclaim_reent+0x22>
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d14a      	bne.n	80064d0 <_reclaim_reent+0xac>
 800643a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643c:	6819      	ldr	r1, [r3, #0]
 800643e:	b111      	cbz	r1, 8006446 <_reclaim_reent+0x22>
 8006440:	4620      	mov	r0, r4
 8006442:	f7ff fee9 	bl	8006218 <_free_r>
 8006446:	6961      	ldr	r1, [r4, #20]
 8006448:	b111      	cbz	r1, 8006450 <_reclaim_reent+0x2c>
 800644a:	4620      	mov	r0, r4
 800644c:	f7ff fee4 	bl	8006218 <_free_r>
 8006450:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006452:	b111      	cbz	r1, 800645a <_reclaim_reent+0x36>
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff fedf 	bl	8006218 <_free_r>
 800645a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800645c:	b111      	cbz	r1, 8006464 <_reclaim_reent+0x40>
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff feda 	bl	8006218 <_free_r>
 8006464:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006466:	b111      	cbz	r1, 800646e <_reclaim_reent+0x4a>
 8006468:	4620      	mov	r0, r4
 800646a:	f7ff fed5 	bl	8006218 <_free_r>
 800646e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006470:	b111      	cbz	r1, 8006478 <_reclaim_reent+0x54>
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff fed0 	bl	8006218 <_free_r>
 8006478:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800647a:	b111      	cbz	r1, 8006482 <_reclaim_reent+0x5e>
 800647c:	4620      	mov	r0, r4
 800647e:	f7ff fecb 	bl	8006218 <_free_r>
 8006482:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006484:	b111      	cbz	r1, 800648c <_reclaim_reent+0x68>
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fec6 	bl	8006218 <_free_r>
 800648c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648e:	b111      	cbz	r1, 8006496 <_reclaim_reent+0x72>
 8006490:	4620      	mov	r0, r4
 8006492:	f7ff fec1 	bl	8006218 <_free_r>
 8006496:	69a3      	ldr	r3, [r4, #24]
 8006498:	b1e3      	cbz	r3, 80064d4 <_reclaim_reent+0xb0>
 800649a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800649c:	4620      	mov	r0, r4
 800649e:	4798      	blx	r3
 80064a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80064a2:	b1b9      	cbz	r1, 80064d4 <_reclaim_reent+0xb0>
 80064a4:	4620      	mov	r0, r4
 80064a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064aa:	f7ff bfad 	b.w	8006408 <cleanup_glue>
 80064ae:	5949      	ldr	r1, [r1, r5]
 80064b0:	b941      	cbnz	r1, 80064c4 <_reclaim_reent+0xa0>
 80064b2:	3504      	adds	r5, #4
 80064b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064b6:	2d80      	cmp	r5, #128	; 0x80
 80064b8:	68d9      	ldr	r1, [r3, #12]
 80064ba:	d1f8      	bne.n	80064ae <_reclaim_reent+0x8a>
 80064bc:	4620      	mov	r0, r4
 80064be:	f7ff feab 	bl	8006218 <_free_r>
 80064c2:	e7ba      	b.n	800643a <_reclaim_reent+0x16>
 80064c4:	680e      	ldr	r6, [r1, #0]
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fea6 	bl	8006218 <_free_r>
 80064cc:	4631      	mov	r1, r6
 80064ce:	e7ef      	b.n	80064b0 <_reclaim_reent+0x8c>
 80064d0:	2500      	movs	r5, #0
 80064d2:	e7ef      	b.n	80064b4 <_reclaim_reent+0x90>
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	bf00      	nop
 80064d8:	20000010 	.word	0x20000010

080064dc <_sbrk_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d06      	ldr	r5, [pc, #24]	; (80064f8 <_sbrk_r+0x1c>)
 80064e0:	2300      	movs	r3, #0
 80064e2:	4604      	mov	r4, r0
 80064e4:	4608      	mov	r0, r1
 80064e6:	602b      	str	r3, [r5, #0]
 80064e8:	f7fa fe10 	bl	800110c <_sbrk>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_sbrk_r+0x1a>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_sbrk_r+0x1a>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	20004818 	.word	0x20004818

080064fc <siprintf>:
 80064fc:	b40e      	push	{r1, r2, r3}
 80064fe:	b500      	push	{lr}
 8006500:	b09c      	sub	sp, #112	; 0x70
 8006502:	ab1d      	add	r3, sp, #116	; 0x74
 8006504:	9002      	str	r0, [sp, #8]
 8006506:	9006      	str	r0, [sp, #24]
 8006508:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800650c:	4809      	ldr	r0, [pc, #36]	; (8006534 <siprintf+0x38>)
 800650e:	9107      	str	r1, [sp, #28]
 8006510:	9104      	str	r1, [sp, #16]
 8006512:	4909      	ldr	r1, [pc, #36]	; (8006538 <siprintf+0x3c>)
 8006514:	f853 2b04 	ldr.w	r2, [r3], #4
 8006518:	9105      	str	r1, [sp, #20]
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	a902      	add	r1, sp, #8
 8006520:	f000 f8f4 	bl	800670c <_svfiprintf_r>
 8006524:	9b02      	ldr	r3, [sp, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	b01c      	add	sp, #112	; 0x70
 800652c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006530:	b003      	add	sp, #12
 8006532:	4770      	bx	lr
 8006534:	20000010 	.word	0x20000010
 8006538:	ffff0208 	.word	0xffff0208

0800653c <__sread>:
 800653c:	b510      	push	{r4, lr}
 800653e:	460c      	mov	r4, r1
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	f000 fcd0 	bl	8006ee8 <_read_r>
 8006548:	2800      	cmp	r0, #0
 800654a:	bfab      	itete	ge
 800654c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800654e:	89a3      	ldrhlt	r3, [r4, #12]
 8006550:	181b      	addge	r3, r3, r0
 8006552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006556:	bfac      	ite	ge
 8006558:	6563      	strge	r3, [r4, #84]	; 0x54
 800655a:	81a3      	strhlt	r3, [r4, #12]
 800655c:	bd10      	pop	{r4, pc}

0800655e <__swrite>:
 800655e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	461f      	mov	r7, r3
 8006564:	898b      	ldrh	r3, [r1, #12]
 8006566:	05db      	lsls	r3, r3, #23
 8006568:	4605      	mov	r5, r0
 800656a:	460c      	mov	r4, r1
 800656c:	4616      	mov	r6, r2
 800656e:	d505      	bpl.n	800657c <__swrite+0x1e>
 8006570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006574:	2302      	movs	r3, #2
 8006576:	2200      	movs	r2, #0
 8006578:	f000 f84e 	bl	8006618 <_lseek_r>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	4632      	mov	r2, r6
 800658a:	463b      	mov	r3, r7
 800658c:	4628      	mov	r0, r5
 800658e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	f000 b81f 	b.w	80065d4 <_write_r>

08006596 <__sseek>:
 8006596:	b510      	push	{r4, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659e:	f000 f83b 	bl	8006618 <_lseek_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	bf15      	itete	ne
 80065a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065b2:	81a3      	strheq	r3, [r4, #12]
 80065b4:	bf18      	it	ne
 80065b6:	81a3      	strhne	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__sclose>:
 80065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065be:	f000 b81b 	b.w	80065f8 <_close_r>

080065c2 <strcpy>:
 80065c2:	4603      	mov	r3, r0
 80065c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065c8:	f803 2b01 	strb.w	r2, [r3], #1
 80065cc:	2a00      	cmp	r2, #0
 80065ce:	d1f9      	bne.n	80065c4 <strcpy+0x2>
 80065d0:	4770      	bx	lr
	...

080065d4 <_write_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d07      	ldr	r5, [pc, #28]	; (80065f4 <_write_r+0x20>)
 80065d8:	4604      	mov	r4, r0
 80065da:	4608      	mov	r0, r1
 80065dc:	4611      	mov	r1, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	602a      	str	r2, [r5, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	f7fa fd41 	bl	800106a <_write>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_write_r+0x1e>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_write_r+0x1e>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	20004818 	.word	0x20004818

080065f8 <_close_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4d06      	ldr	r5, [pc, #24]	; (8006614 <_close_r+0x1c>)
 80065fc:	2300      	movs	r3, #0
 80065fe:	4604      	mov	r4, r0
 8006600:	4608      	mov	r0, r1
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	f7fa fd4d 	bl	80010a2 <_close>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_close_r+0x1a>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_close_r+0x1a>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	20004818 	.word	0x20004818

08006618 <_lseek_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	; (8006638 <_lseek_r+0x20>)
 800661c:	4604      	mov	r4, r0
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	2200      	movs	r2, #0
 8006624:	602a      	str	r2, [r5, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fa fd62 	bl	80010f0 <_lseek>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_lseek_r+0x1e>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_lseek_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20004818 	.word	0x20004818

0800663c <__malloc_lock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_lock+0x8>)
 800663e:	f7ff bdd2 	b.w	80061e6 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	2000480c 	.word	0x2000480c

08006648 <__malloc_unlock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_unlock+0x8>)
 800664a:	f7ff bdcd 	b.w	80061e8 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	2000480c 	.word	0x2000480c

08006654 <__ssputs_r>:
 8006654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006658:	688e      	ldr	r6, [r1, #8]
 800665a:	429e      	cmp	r6, r3
 800665c:	4682      	mov	sl, r0
 800665e:	460c      	mov	r4, r1
 8006660:	4690      	mov	r8, r2
 8006662:	461f      	mov	r7, r3
 8006664:	d838      	bhi.n	80066d8 <__ssputs_r+0x84>
 8006666:	898a      	ldrh	r2, [r1, #12]
 8006668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800666c:	d032      	beq.n	80066d4 <__ssputs_r+0x80>
 800666e:	6825      	ldr	r5, [r4, #0]
 8006670:	6909      	ldr	r1, [r1, #16]
 8006672:	eba5 0901 	sub.w	r9, r5, r1
 8006676:	6965      	ldr	r5, [r4, #20]
 8006678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800667c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006680:	3301      	adds	r3, #1
 8006682:	444b      	add	r3, r9
 8006684:	106d      	asrs	r5, r5, #1
 8006686:	429d      	cmp	r5, r3
 8006688:	bf38      	it	cc
 800668a:	461d      	movcc	r5, r3
 800668c:	0553      	lsls	r3, r2, #21
 800668e:	d531      	bpl.n	80066f4 <__ssputs_r+0xa0>
 8006690:	4629      	mov	r1, r5
 8006692:	f7ff fe2d 	bl	80062f0 <_malloc_r>
 8006696:	4606      	mov	r6, r0
 8006698:	b950      	cbnz	r0, 80066b0 <__ssputs_r+0x5c>
 800669a:	230c      	movs	r3, #12
 800669c:	f8ca 3000 	str.w	r3, [sl]
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b0:	6921      	ldr	r1, [r4, #16]
 80066b2:	464a      	mov	r2, r9
 80066b4:	f7ff fd99 	bl	80061ea <memcpy>
 80066b8:	89a3      	ldrh	r3, [r4, #12]
 80066ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80066be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c2:	81a3      	strh	r3, [r4, #12]
 80066c4:	6126      	str	r6, [r4, #16]
 80066c6:	6165      	str	r5, [r4, #20]
 80066c8:	444e      	add	r6, r9
 80066ca:	eba5 0509 	sub.w	r5, r5, r9
 80066ce:	6026      	str	r6, [r4, #0]
 80066d0:	60a5      	str	r5, [r4, #8]
 80066d2:	463e      	mov	r6, r7
 80066d4:	42be      	cmp	r6, r7
 80066d6:	d900      	bls.n	80066da <__ssputs_r+0x86>
 80066d8:	463e      	mov	r6, r7
 80066da:	6820      	ldr	r0, [r4, #0]
 80066dc:	4632      	mov	r2, r6
 80066de:	4641      	mov	r1, r8
 80066e0:	f000 fd3a 	bl	8007158 <memmove>
 80066e4:	68a3      	ldr	r3, [r4, #8]
 80066e6:	1b9b      	subs	r3, r3, r6
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	4433      	add	r3, r6
 80066ee:	6023      	str	r3, [r4, #0]
 80066f0:	2000      	movs	r0, #0
 80066f2:	e7db      	b.n	80066ac <__ssputs_r+0x58>
 80066f4:	462a      	mov	r2, r5
 80066f6:	f000 fd49 	bl	800718c <_realloc_r>
 80066fa:	4606      	mov	r6, r0
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d1e1      	bne.n	80066c4 <__ssputs_r+0x70>
 8006700:	6921      	ldr	r1, [r4, #16]
 8006702:	4650      	mov	r0, sl
 8006704:	f7ff fd88 	bl	8006218 <_free_r>
 8006708:	e7c7      	b.n	800669a <__ssputs_r+0x46>
	...

0800670c <_svfiprintf_r>:
 800670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	4698      	mov	r8, r3
 8006712:	898b      	ldrh	r3, [r1, #12]
 8006714:	061b      	lsls	r3, r3, #24
 8006716:	b09d      	sub	sp, #116	; 0x74
 8006718:	4607      	mov	r7, r0
 800671a:	460d      	mov	r5, r1
 800671c:	4614      	mov	r4, r2
 800671e:	d50e      	bpl.n	800673e <_svfiprintf_r+0x32>
 8006720:	690b      	ldr	r3, [r1, #16]
 8006722:	b963      	cbnz	r3, 800673e <_svfiprintf_r+0x32>
 8006724:	2140      	movs	r1, #64	; 0x40
 8006726:	f7ff fde3 	bl	80062f0 <_malloc_r>
 800672a:	6028      	str	r0, [r5, #0]
 800672c:	6128      	str	r0, [r5, #16]
 800672e:	b920      	cbnz	r0, 800673a <_svfiprintf_r+0x2e>
 8006730:	230c      	movs	r3, #12
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006738:	e0d1      	b.n	80068de <_svfiprintf_r+0x1d2>
 800673a:	2340      	movs	r3, #64	; 0x40
 800673c:	616b      	str	r3, [r5, #20]
 800673e:	2300      	movs	r3, #0
 8006740:	9309      	str	r3, [sp, #36]	; 0x24
 8006742:	2320      	movs	r3, #32
 8006744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006748:	f8cd 800c 	str.w	r8, [sp, #12]
 800674c:	2330      	movs	r3, #48	; 0x30
 800674e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80068f8 <_svfiprintf_r+0x1ec>
 8006752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006756:	f04f 0901 	mov.w	r9, #1
 800675a:	4623      	mov	r3, r4
 800675c:	469a      	mov	sl, r3
 800675e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006762:	b10a      	cbz	r2, 8006768 <_svfiprintf_r+0x5c>
 8006764:	2a25      	cmp	r2, #37	; 0x25
 8006766:	d1f9      	bne.n	800675c <_svfiprintf_r+0x50>
 8006768:	ebba 0b04 	subs.w	fp, sl, r4
 800676c:	d00b      	beq.n	8006786 <_svfiprintf_r+0x7a>
 800676e:	465b      	mov	r3, fp
 8006770:	4622      	mov	r2, r4
 8006772:	4629      	mov	r1, r5
 8006774:	4638      	mov	r0, r7
 8006776:	f7ff ff6d 	bl	8006654 <__ssputs_r>
 800677a:	3001      	adds	r0, #1
 800677c:	f000 80aa 	beq.w	80068d4 <_svfiprintf_r+0x1c8>
 8006780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006782:	445a      	add	r2, fp
 8006784:	9209      	str	r2, [sp, #36]	; 0x24
 8006786:	f89a 3000 	ldrb.w	r3, [sl]
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 80a2 	beq.w	80068d4 <_svfiprintf_r+0x1c8>
 8006790:	2300      	movs	r3, #0
 8006792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800679a:	f10a 0a01 	add.w	sl, sl, #1
 800679e:	9304      	str	r3, [sp, #16]
 80067a0:	9307      	str	r3, [sp, #28]
 80067a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067a6:	931a      	str	r3, [sp, #104]	; 0x68
 80067a8:	4654      	mov	r4, sl
 80067aa:	2205      	movs	r2, #5
 80067ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b0:	4851      	ldr	r0, [pc, #324]	; (80068f8 <_svfiprintf_r+0x1ec>)
 80067b2:	f7f9 fd25 	bl	8000200 <memchr>
 80067b6:	9a04      	ldr	r2, [sp, #16]
 80067b8:	b9d8      	cbnz	r0, 80067f2 <_svfiprintf_r+0xe6>
 80067ba:	06d0      	lsls	r0, r2, #27
 80067bc:	bf44      	itt	mi
 80067be:	2320      	movmi	r3, #32
 80067c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067c4:	0711      	lsls	r1, r2, #28
 80067c6:	bf44      	itt	mi
 80067c8:	232b      	movmi	r3, #43	; 0x2b
 80067ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ce:	f89a 3000 	ldrb.w	r3, [sl]
 80067d2:	2b2a      	cmp	r3, #42	; 0x2a
 80067d4:	d015      	beq.n	8006802 <_svfiprintf_r+0xf6>
 80067d6:	9a07      	ldr	r2, [sp, #28]
 80067d8:	4654      	mov	r4, sl
 80067da:	2000      	movs	r0, #0
 80067dc:	f04f 0c0a 	mov.w	ip, #10
 80067e0:	4621      	mov	r1, r4
 80067e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067e6:	3b30      	subs	r3, #48	; 0x30
 80067e8:	2b09      	cmp	r3, #9
 80067ea:	d94e      	bls.n	800688a <_svfiprintf_r+0x17e>
 80067ec:	b1b0      	cbz	r0, 800681c <_svfiprintf_r+0x110>
 80067ee:	9207      	str	r2, [sp, #28]
 80067f0:	e014      	b.n	800681c <_svfiprintf_r+0x110>
 80067f2:	eba0 0308 	sub.w	r3, r0, r8
 80067f6:	fa09 f303 	lsl.w	r3, r9, r3
 80067fa:	4313      	orrs	r3, r2
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	46a2      	mov	sl, r4
 8006800:	e7d2      	b.n	80067a8 <_svfiprintf_r+0x9c>
 8006802:	9b03      	ldr	r3, [sp, #12]
 8006804:	1d19      	adds	r1, r3, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	9103      	str	r1, [sp, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	bfbb      	ittet	lt
 800680e:	425b      	neglt	r3, r3
 8006810:	f042 0202 	orrlt.w	r2, r2, #2
 8006814:	9307      	strge	r3, [sp, #28]
 8006816:	9307      	strlt	r3, [sp, #28]
 8006818:	bfb8      	it	lt
 800681a:	9204      	strlt	r2, [sp, #16]
 800681c:	7823      	ldrb	r3, [r4, #0]
 800681e:	2b2e      	cmp	r3, #46	; 0x2e
 8006820:	d10c      	bne.n	800683c <_svfiprintf_r+0x130>
 8006822:	7863      	ldrb	r3, [r4, #1]
 8006824:	2b2a      	cmp	r3, #42	; 0x2a
 8006826:	d135      	bne.n	8006894 <_svfiprintf_r+0x188>
 8006828:	9b03      	ldr	r3, [sp, #12]
 800682a:	1d1a      	adds	r2, r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	9203      	str	r2, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	bfb8      	it	lt
 8006834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006838:	3402      	adds	r4, #2
 800683a:	9305      	str	r3, [sp, #20]
 800683c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006908 <_svfiprintf_r+0x1fc>
 8006840:	7821      	ldrb	r1, [r4, #0]
 8006842:	2203      	movs	r2, #3
 8006844:	4650      	mov	r0, sl
 8006846:	f7f9 fcdb 	bl	8000200 <memchr>
 800684a:	b140      	cbz	r0, 800685e <_svfiprintf_r+0x152>
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	eba0 000a 	sub.w	r0, r0, sl
 8006852:	fa03 f000 	lsl.w	r0, r3, r0
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	4303      	orrs	r3, r0
 800685a:	3401      	adds	r4, #1
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006862:	4826      	ldr	r0, [pc, #152]	; (80068fc <_svfiprintf_r+0x1f0>)
 8006864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006868:	2206      	movs	r2, #6
 800686a:	f7f9 fcc9 	bl	8000200 <memchr>
 800686e:	2800      	cmp	r0, #0
 8006870:	d038      	beq.n	80068e4 <_svfiprintf_r+0x1d8>
 8006872:	4b23      	ldr	r3, [pc, #140]	; (8006900 <_svfiprintf_r+0x1f4>)
 8006874:	bb1b      	cbnz	r3, 80068be <_svfiprintf_r+0x1b2>
 8006876:	9b03      	ldr	r3, [sp, #12]
 8006878:	3307      	adds	r3, #7
 800687a:	f023 0307 	bic.w	r3, r3, #7
 800687e:	3308      	adds	r3, #8
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006884:	4433      	add	r3, r6
 8006886:	9309      	str	r3, [sp, #36]	; 0x24
 8006888:	e767      	b.n	800675a <_svfiprintf_r+0x4e>
 800688a:	fb0c 3202 	mla	r2, ip, r2, r3
 800688e:	460c      	mov	r4, r1
 8006890:	2001      	movs	r0, #1
 8006892:	e7a5      	b.n	80067e0 <_svfiprintf_r+0xd4>
 8006894:	2300      	movs	r3, #0
 8006896:	3401      	adds	r4, #1
 8006898:	9305      	str	r3, [sp, #20]
 800689a:	4619      	mov	r1, r3
 800689c:	f04f 0c0a 	mov.w	ip, #10
 80068a0:	4620      	mov	r0, r4
 80068a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068a6:	3a30      	subs	r2, #48	; 0x30
 80068a8:	2a09      	cmp	r2, #9
 80068aa:	d903      	bls.n	80068b4 <_svfiprintf_r+0x1a8>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0c5      	beq.n	800683c <_svfiprintf_r+0x130>
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	e7c3      	b.n	800683c <_svfiprintf_r+0x130>
 80068b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80068b8:	4604      	mov	r4, r0
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7f0      	b.n	80068a0 <_svfiprintf_r+0x194>
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	462a      	mov	r2, r5
 80068c4:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <_svfiprintf_r+0x1f8>)
 80068c6:	a904      	add	r1, sp, #16
 80068c8:	4638      	mov	r0, r7
 80068ca:	f3af 8000 	nop.w
 80068ce:	1c42      	adds	r2, r0, #1
 80068d0:	4606      	mov	r6, r0
 80068d2:	d1d6      	bne.n	8006882 <_svfiprintf_r+0x176>
 80068d4:	89ab      	ldrh	r3, [r5, #12]
 80068d6:	065b      	lsls	r3, r3, #25
 80068d8:	f53f af2c 	bmi.w	8006734 <_svfiprintf_r+0x28>
 80068dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80068de:	b01d      	add	sp, #116	; 0x74
 80068e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	ab03      	add	r3, sp, #12
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	462a      	mov	r2, r5
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <_svfiprintf_r+0x1f8>)
 80068ec:	a904      	add	r1, sp, #16
 80068ee:	4638      	mov	r0, r7
 80068f0:	f000 f9d4 	bl	8006c9c <_printf_i>
 80068f4:	e7eb      	b.n	80068ce <_svfiprintf_r+0x1c2>
 80068f6:	bf00      	nop
 80068f8:	08007490 	.word	0x08007490
 80068fc:	0800749a 	.word	0x0800749a
 8006900:	00000000 	.word	0x00000000
 8006904:	08006655 	.word	0x08006655
 8006908:	08007496 	.word	0x08007496

0800690c <__sfputc_r>:
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	b410      	push	{r4}
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	da08      	bge.n	800692a <__sfputc_r+0x1e>
 8006918:	6994      	ldr	r4, [r2, #24]
 800691a:	42a3      	cmp	r3, r4
 800691c:	db01      	blt.n	8006922 <__sfputc_r+0x16>
 800691e:	290a      	cmp	r1, #10
 8006920:	d103      	bne.n	800692a <__sfputc_r+0x1e>
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006926:	f000 baf1 	b.w	8006f0c <__swbuf_r>
 800692a:	6813      	ldr	r3, [r2, #0]
 800692c:	1c58      	adds	r0, r3, #1
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	7019      	strb	r1, [r3, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006938:	4770      	bx	lr

0800693a <__sfputs_r>:
 800693a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693c:	4606      	mov	r6, r0
 800693e:	460f      	mov	r7, r1
 8006940:	4614      	mov	r4, r2
 8006942:	18d5      	adds	r5, r2, r3
 8006944:	42ac      	cmp	r4, r5
 8006946:	d101      	bne.n	800694c <__sfputs_r+0x12>
 8006948:	2000      	movs	r0, #0
 800694a:	e007      	b.n	800695c <__sfputs_r+0x22>
 800694c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006950:	463a      	mov	r2, r7
 8006952:	4630      	mov	r0, r6
 8006954:	f7ff ffda 	bl	800690c <__sfputc_r>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d1f3      	bne.n	8006944 <__sfputs_r+0xa>
 800695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006960 <_vfiprintf_r>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	460d      	mov	r5, r1
 8006966:	b09d      	sub	sp, #116	; 0x74
 8006968:	4614      	mov	r4, r2
 800696a:	4698      	mov	r8, r3
 800696c:	4606      	mov	r6, r0
 800696e:	b118      	cbz	r0, 8006978 <_vfiprintf_r+0x18>
 8006970:	6983      	ldr	r3, [r0, #24]
 8006972:	b90b      	cbnz	r3, 8006978 <_vfiprintf_r+0x18>
 8006974:	f7ff fb74 	bl	8006060 <__sinit>
 8006978:	4b89      	ldr	r3, [pc, #548]	; (8006ba0 <_vfiprintf_r+0x240>)
 800697a:	429d      	cmp	r5, r3
 800697c:	d11b      	bne.n	80069b6 <_vfiprintf_r+0x56>
 800697e:	6875      	ldr	r5, [r6, #4]
 8006980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006982:	07d9      	lsls	r1, r3, #31
 8006984:	d405      	bmi.n	8006992 <_vfiprintf_r+0x32>
 8006986:	89ab      	ldrh	r3, [r5, #12]
 8006988:	059a      	lsls	r2, r3, #22
 800698a:	d402      	bmi.n	8006992 <_vfiprintf_r+0x32>
 800698c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800698e:	f7ff fc2a 	bl	80061e6 <__retarget_lock_acquire_recursive>
 8006992:	89ab      	ldrh	r3, [r5, #12]
 8006994:	071b      	lsls	r3, r3, #28
 8006996:	d501      	bpl.n	800699c <_vfiprintf_r+0x3c>
 8006998:	692b      	ldr	r3, [r5, #16]
 800699a:	b9eb      	cbnz	r3, 80069d8 <_vfiprintf_r+0x78>
 800699c:	4629      	mov	r1, r5
 800699e:	4630      	mov	r0, r6
 80069a0:	f000 fb06 	bl	8006fb0 <__swsetup_r>
 80069a4:	b1c0      	cbz	r0, 80069d8 <_vfiprintf_r+0x78>
 80069a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a8:	07dc      	lsls	r4, r3, #31
 80069aa:	d50e      	bpl.n	80069ca <_vfiprintf_r+0x6a>
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069b0:	b01d      	add	sp, #116	; 0x74
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	4b7b      	ldr	r3, [pc, #492]	; (8006ba4 <_vfiprintf_r+0x244>)
 80069b8:	429d      	cmp	r5, r3
 80069ba:	d101      	bne.n	80069c0 <_vfiprintf_r+0x60>
 80069bc:	68b5      	ldr	r5, [r6, #8]
 80069be:	e7df      	b.n	8006980 <_vfiprintf_r+0x20>
 80069c0:	4b79      	ldr	r3, [pc, #484]	; (8006ba8 <_vfiprintf_r+0x248>)
 80069c2:	429d      	cmp	r5, r3
 80069c4:	bf08      	it	eq
 80069c6:	68f5      	ldreq	r5, [r6, #12]
 80069c8:	e7da      	b.n	8006980 <_vfiprintf_r+0x20>
 80069ca:	89ab      	ldrh	r3, [r5, #12]
 80069cc:	0598      	lsls	r0, r3, #22
 80069ce:	d4ed      	bmi.n	80069ac <_vfiprintf_r+0x4c>
 80069d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069d2:	f7ff fc09 	bl	80061e8 <__retarget_lock_release_recursive>
 80069d6:	e7e9      	b.n	80069ac <_vfiprintf_r+0x4c>
 80069d8:	2300      	movs	r3, #0
 80069da:	9309      	str	r3, [sp, #36]	; 0x24
 80069dc:	2320      	movs	r3, #32
 80069de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80069e6:	2330      	movs	r3, #48	; 0x30
 80069e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006bac <_vfiprintf_r+0x24c>
 80069ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069f0:	f04f 0901 	mov.w	r9, #1
 80069f4:	4623      	mov	r3, r4
 80069f6:	469a      	mov	sl, r3
 80069f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069fc:	b10a      	cbz	r2, 8006a02 <_vfiprintf_r+0xa2>
 80069fe:	2a25      	cmp	r2, #37	; 0x25
 8006a00:	d1f9      	bne.n	80069f6 <_vfiprintf_r+0x96>
 8006a02:	ebba 0b04 	subs.w	fp, sl, r4
 8006a06:	d00b      	beq.n	8006a20 <_vfiprintf_r+0xc0>
 8006a08:	465b      	mov	r3, fp
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ff93 	bl	800693a <__sfputs_r>
 8006a14:	3001      	adds	r0, #1
 8006a16:	f000 80aa 	beq.w	8006b6e <_vfiprintf_r+0x20e>
 8006a1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1c:	445a      	add	r2, fp
 8006a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a20:	f89a 3000 	ldrb.w	r3, [sl]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80a2 	beq.w	8006b6e <_vfiprintf_r+0x20e>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a34:	f10a 0a01 	add.w	sl, sl, #1
 8006a38:	9304      	str	r3, [sp, #16]
 8006a3a:	9307      	str	r3, [sp, #28]
 8006a3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a40:	931a      	str	r3, [sp, #104]	; 0x68
 8006a42:	4654      	mov	r4, sl
 8006a44:	2205      	movs	r2, #5
 8006a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a4a:	4858      	ldr	r0, [pc, #352]	; (8006bac <_vfiprintf_r+0x24c>)
 8006a4c:	f7f9 fbd8 	bl	8000200 <memchr>
 8006a50:	9a04      	ldr	r2, [sp, #16]
 8006a52:	b9d8      	cbnz	r0, 8006a8c <_vfiprintf_r+0x12c>
 8006a54:	06d1      	lsls	r1, r2, #27
 8006a56:	bf44      	itt	mi
 8006a58:	2320      	movmi	r3, #32
 8006a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5e:	0713      	lsls	r3, r2, #28
 8006a60:	bf44      	itt	mi
 8006a62:	232b      	movmi	r3, #43	; 0x2b
 8006a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a68:	f89a 3000 	ldrb.w	r3, [sl]
 8006a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6e:	d015      	beq.n	8006a9c <_vfiprintf_r+0x13c>
 8006a70:	9a07      	ldr	r2, [sp, #28]
 8006a72:	4654      	mov	r4, sl
 8006a74:	2000      	movs	r0, #0
 8006a76:	f04f 0c0a 	mov.w	ip, #10
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a80:	3b30      	subs	r3, #48	; 0x30
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d94e      	bls.n	8006b24 <_vfiprintf_r+0x1c4>
 8006a86:	b1b0      	cbz	r0, 8006ab6 <_vfiprintf_r+0x156>
 8006a88:	9207      	str	r2, [sp, #28]
 8006a8a:	e014      	b.n	8006ab6 <_vfiprintf_r+0x156>
 8006a8c:	eba0 0308 	sub.w	r3, r0, r8
 8006a90:	fa09 f303 	lsl.w	r3, r9, r3
 8006a94:	4313      	orrs	r3, r2
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	46a2      	mov	sl, r4
 8006a9a:	e7d2      	b.n	8006a42 <_vfiprintf_r+0xe2>
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	1d19      	adds	r1, r3, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	9103      	str	r1, [sp, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bfbb      	ittet	lt
 8006aa8:	425b      	neglt	r3, r3
 8006aaa:	f042 0202 	orrlt.w	r2, r2, #2
 8006aae:	9307      	strge	r3, [sp, #28]
 8006ab0:	9307      	strlt	r3, [sp, #28]
 8006ab2:	bfb8      	it	lt
 8006ab4:	9204      	strlt	r2, [sp, #16]
 8006ab6:	7823      	ldrb	r3, [r4, #0]
 8006ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8006aba:	d10c      	bne.n	8006ad6 <_vfiprintf_r+0x176>
 8006abc:	7863      	ldrb	r3, [r4, #1]
 8006abe:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac0:	d135      	bne.n	8006b2e <_vfiprintf_r+0x1ce>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	1d1a      	adds	r2, r3, #4
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	9203      	str	r2, [sp, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	bfb8      	it	lt
 8006ace:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ad2:	3402      	adds	r4, #2
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bbc <_vfiprintf_r+0x25c>
 8006ada:	7821      	ldrb	r1, [r4, #0]
 8006adc:	2203      	movs	r2, #3
 8006ade:	4650      	mov	r0, sl
 8006ae0:	f7f9 fb8e 	bl	8000200 <memchr>
 8006ae4:	b140      	cbz	r0, 8006af8 <_vfiprintf_r+0x198>
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	eba0 000a 	sub.w	r0, r0, sl
 8006aec:	fa03 f000 	lsl.w	r0, r3, r0
 8006af0:	9b04      	ldr	r3, [sp, #16]
 8006af2:	4303      	orrs	r3, r0
 8006af4:	3401      	adds	r4, #1
 8006af6:	9304      	str	r3, [sp, #16]
 8006af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afc:	482c      	ldr	r0, [pc, #176]	; (8006bb0 <_vfiprintf_r+0x250>)
 8006afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b02:	2206      	movs	r2, #6
 8006b04:	f7f9 fb7c 	bl	8000200 <memchr>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d03f      	beq.n	8006b8c <_vfiprintf_r+0x22c>
 8006b0c:	4b29      	ldr	r3, [pc, #164]	; (8006bb4 <_vfiprintf_r+0x254>)
 8006b0e:	bb1b      	cbnz	r3, 8006b58 <_vfiprintf_r+0x1f8>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	3307      	adds	r3, #7
 8006b14:	f023 0307 	bic.w	r3, r3, #7
 8006b18:	3308      	adds	r3, #8
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1e:	443b      	add	r3, r7
 8006b20:	9309      	str	r3, [sp, #36]	; 0x24
 8006b22:	e767      	b.n	80069f4 <_vfiprintf_r+0x94>
 8006b24:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b28:	460c      	mov	r4, r1
 8006b2a:	2001      	movs	r0, #1
 8006b2c:	e7a5      	b.n	8006a7a <_vfiprintf_r+0x11a>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	3401      	adds	r4, #1
 8006b32:	9305      	str	r3, [sp, #20]
 8006b34:	4619      	mov	r1, r3
 8006b36:	f04f 0c0a 	mov.w	ip, #10
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b40:	3a30      	subs	r2, #48	; 0x30
 8006b42:	2a09      	cmp	r2, #9
 8006b44:	d903      	bls.n	8006b4e <_vfiprintf_r+0x1ee>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0c5      	beq.n	8006ad6 <_vfiprintf_r+0x176>
 8006b4a:	9105      	str	r1, [sp, #20]
 8006b4c:	e7c3      	b.n	8006ad6 <_vfiprintf_r+0x176>
 8006b4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b52:	4604      	mov	r4, r0
 8006b54:	2301      	movs	r3, #1
 8006b56:	e7f0      	b.n	8006b3a <_vfiprintf_r+0x1da>
 8006b58:	ab03      	add	r3, sp, #12
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <_vfiprintf_r+0x258>)
 8006b60:	a904      	add	r1, sp, #16
 8006b62:	4630      	mov	r0, r6
 8006b64:	f3af 8000 	nop.w
 8006b68:	4607      	mov	r7, r0
 8006b6a:	1c78      	adds	r0, r7, #1
 8006b6c:	d1d6      	bne.n	8006b1c <_vfiprintf_r+0x1bc>
 8006b6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b70:	07d9      	lsls	r1, r3, #31
 8006b72:	d405      	bmi.n	8006b80 <_vfiprintf_r+0x220>
 8006b74:	89ab      	ldrh	r3, [r5, #12]
 8006b76:	059a      	lsls	r2, r3, #22
 8006b78:	d402      	bmi.n	8006b80 <_vfiprintf_r+0x220>
 8006b7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7c:	f7ff fb34 	bl	80061e8 <__retarget_lock_release_recursive>
 8006b80:	89ab      	ldrh	r3, [r5, #12]
 8006b82:	065b      	lsls	r3, r3, #25
 8006b84:	f53f af12 	bmi.w	80069ac <_vfiprintf_r+0x4c>
 8006b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b8a:	e711      	b.n	80069b0 <_vfiprintf_r+0x50>
 8006b8c:	ab03      	add	r3, sp, #12
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	462a      	mov	r2, r5
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <_vfiprintf_r+0x258>)
 8006b94:	a904      	add	r1, sp, #16
 8006b96:	4630      	mov	r0, r6
 8006b98:	f000 f880 	bl	8006c9c <_printf_i>
 8006b9c:	e7e4      	b.n	8006b68 <_vfiprintf_r+0x208>
 8006b9e:	bf00      	nop
 8006ba0:	0800744c 	.word	0x0800744c
 8006ba4:	0800746c 	.word	0x0800746c
 8006ba8:	0800742c 	.word	0x0800742c
 8006bac:	08007490 	.word	0x08007490
 8006bb0:	0800749a 	.word	0x0800749a
 8006bb4:	00000000 	.word	0x00000000
 8006bb8:	0800693b 	.word	0x0800693b
 8006bbc:	08007496 	.word	0x08007496

08006bc0 <_printf_common>:
 8006bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	4616      	mov	r6, r2
 8006bc6:	4699      	mov	r9, r3
 8006bc8:	688a      	ldr	r2, [r1, #8]
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	bfb8      	it	lt
 8006bd4:	4613      	movlt	r3, r2
 8006bd6:	6033      	str	r3, [r6, #0]
 8006bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bdc:	4607      	mov	r7, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	b10a      	cbz	r2, 8006be6 <_printf_common+0x26>
 8006be2:	3301      	adds	r3, #1
 8006be4:	6033      	str	r3, [r6, #0]
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	0699      	lsls	r1, r3, #26
 8006bea:	bf42      	ittt	mi
 8006bec:	6833      	ldrmi	r3, [r6, #0]
 8006bee:	3302      	addmi	r3, #2
 8006bf0:	6033      	strmi	r3, [r6, #0]
 8006bf2:	6825      	ldr	r5, [r4, #0]
 8006bf4:	f015 0506 	ands.w	r5, r5, #6
 8006bf8:	d106      	bne.n	8006c08 <_printf_common+0x48>
 8006bfa:	f104 0a19 	add.w	sl, r4, #25
 8006bfe:	68e3      	ldr	r3, [r4, #12]
 8006c00:	6832      	ldr	r2, [r6, #0]
 8006c02:	1a9b      	subs	r3, r3, r2
 8006c04:	42ab      	cmp	r3, r5
 8006c06:	dc26      	bgt.n	8006c56 <_printf_common+0x96>
 8006c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c0c:	1e13      	subs	r3, r2, #0
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	bf18      	it	ne
 8006c12:	2301      	movne	r3, #1
 8006c14:	0692      	lsls	r2, r2, #26
 8006c16:	d42b      	bmi.n	8006c70 <_printf_common+0xb0>
 8006c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c1c:	4649      	mov	r1, r9
 8006c1e:	4638      	mov	r0, r7
 8006c20:	47c0      	blx	r8
 8006c22:	3001      	adds	r0, #1
 8006c24:	d01e      	beq.n	8006c64 <_printf_common+0xa4>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	68e5      	ldr	r5, [r4, #12]
 8006c2a:	6832      	ldr	r2, [r6, #0]
 8006c2c:	f003 0306 	and.w	r3, r3, #6
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	bf08      	it	eq
 8006c34:	1aad      	subeq	r5, r5, r2
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	6922      	ldr	r2, [r4, #16]
 8006c3a:	bf0c      	ite	eq
 8006c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c40:	2500      	movne	r5, #0
 8006c42:	4293      	cmp	r3, r2
 8006c44:	bfc4      	itt	gt
 8006c46:	1a9b      	subgt	r3, r3, r2
 8006c48:	18ed      	addgt	r5, r5, r3
 8006c4a:	2600      	movs	r6, #0
 8006c4c:	341a      	adds	r4, #26
 8006c4e:	42b5      	cmp	r5, r6
 8006c50:	d11a      	bne.n	8006c88 <_printf_common+0xc8>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e008      	b.n	8006c68 <_printf_common+0xa8>
 8006c56:	2301      	movs	r3, #1
 8006c58:	4652      	mov	r2, sl
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	47c0      	blx	r8
 8006c60:	3001      	adds	r0, #1
 8006c62:	d103      	bne.n	8006c6c <_printf_common+0xac>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	e7c6      	b.n	8006bfe <_printf_common+0x3e>
 8006c70:	18e1      	adds	r1, r4, r3
 8006c72:	1c5a      	adds	r2, r3, #1
 8006c74:	2030      	movs	r0, #48	; 0x30
 8006c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c7a:	4422      	add	r2, r4
 8006c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c84:	3302      	adds	r3, #2
 8006c86:	e7c7      	b.n	8006c18 <_printf_common+0x58>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	4638      	mov	r0, r7
 8006c90:	47c0      	blx	r8
 8006c92:	3001      	adds	r0, #1
 8006c94:	d0e6      	beq.n	8006c64 <_printf_common+0xa4>
 8006c96:	3601      	adds	r6, #1
 8006c98:	e7d9      	b.n	8006c4e <_printf_common+0x8e>
	...

08006c9c <_printf_i>:
 8006c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	7e0f      	ldrb	r7, [r1, #24]
 8006ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ca4:	2f78      	cmp	r7, #120	; 0x78
 8006ca6:	4691      	mov	r9, r2
 8006ca8:	4680      	mov	r8, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	469a      	mov	sl, r3
 8006cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cb2:	d807      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cb4:	2f62      	cmp	r7, #98	; 0x62
 8006cb6:	d80a      	bhi.n	8006cce <_printf_i+0x32>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	f000 80d8 	beq.w	8006e6e <_printf_i+0x1d2>
 8006cbe:	2f58      	cmp	r7, #88	; 0x58
 8006cc0:	f000 80a3 	beq.w	8006e0a <_printf_i+0x16e>
 8006cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ccc:	e03a      	b.n	8006d44 <_printf_i+0xa8>
 8006cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cd2:	2b15      	cmp	r3, #21
 8006cd4:	d8f6      	bhi.n	8006cc4 <_printf_i+0x28>
 8006cd6:	a101      	add	r1, pc, #4	; (adr r1, 8006cdc <_printf_i+0x40>)
 8006cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cdc:	08006d35 	.word	0x08006d35
 8006ce0:	08006d49 	.word	0x08006d49
 8006ce4:	08006cc5 	.word	0x08006cc5
 8006ce8:	08006cc5 	.word	0x08006cc5
 8006cec:	08006cc5 	.word	0x08006cc5
 8006cf0:	08006cc5 	.word	0x08006cc5
 8006cf4:	08006d49 	.word	0x08006d49
 8006cf8:	08006cc5 	.word	0x08006cc5
 8006cfc:	08006cc5 	.word	0x08006cc5
 8006d00:	08006cc5 	.word	0x08006cc5
 8006d04:	08006cc5 	.word	0x08006cc5
 8006d08:	08006e55 	.word	0x08006e55
 8006d0c:	08006d79 	.word	0x08006d79
 8006d10:	08006e37 	.word	0x08006e37
 8006d14:	08006cc5 	.word	0x08006cc5
 8006d18:	08006cc5 	.word	0x08006cc5
 8006d1c:	08006e77 	.word	0x08006e77
 8006d20:	08006cc5 	.word	0x08006cc5
 8006d24:	08006d79 	.word	0x08006d79
 8006d28:	08006cc5 	.word	0x08006cc5
 8006d2c:	08006cc5 	.word	0x08006cc5
 8006d30:	08006e3f 	.word	0x08006e3f
 8006d34:	682b      	ldr	r3, [r5, #0]
 8006d36:	1d1a      	adds	r2, r3, #4
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0a3      	b.n	8006e90 <_printf_i+0x1f4>
 8006d48:	6820      	ldr	r0, [r4, #0]
 8006d4a:	6829      	ldr	r1, [r5, #0]
 8006d4c:	0606      	lsls	r6, r0, #24
 8006d4e:	f101 0304 	add.w	r3, r1, #4
 8006d52:	d50a      	bpl.n	8006d6a <_printf_i+0xce>
 8006d54:	680e      	ldr	r6, [r1, #0]
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	2e00      	cmp	r6, #0
 8006d5a:	da03      	bge.n	8006d64 <_printf_i+0xc8>
 8006d5c:	232d      	movs	r3, #45	; 0x2d
 8006d5e:	4276      	negs	r6, r6
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	485e      	ldr	r0, [pc, #376]	; (8006ee0 <_printf_i+0x244>)
 8006d66:	230a      	movs	r3, #10
 8006d68:	e019      	b.n	8006d9e <_printf_i+0x102>
 8006d6a:	680e      	ldr	r6, [r1, #0]
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d72:	bf18      	it	ne
 8006d74:	b236      	sxthne	r6, r6
 8006d76:	e7ef      	b.n	8006d58 <_printf_i+0xbc>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	6820      	ldr	r0, [r4, #0]
 8006d7c:	1d19      	adds	r1, r3, #4
 8006d7e:	6029      	str	r1, [r5, #0]
 8006d80:	0601      	lsls	r1, r0, #24
 8006d82:	d501      	bpl.n	8006d88 <_printf_i+0xec>
 8006d84:	681e      	ldr	r6, [r3, #0]
 8006d86:	e002      	b.n	8006d8e <_printf_i+0xf2>
 8006d88:	0646      	lsls	r6, r0, #25
 8006d8a:	d5fb      	bpl.n	8006d84 <_printf_i+0xe8>
 8006d8c:	881e      	ldrh	r6, [r3, #0]
 8006d8e:	4854      	ldr	r0, [pc, #336]	; (8006ee0 <_printf_i+0x244>)
 8006d90:	2f6f      	cmp	r7, #111	; 0x6f
 8006d92:	bf0c      	ite	eq
 8006d94:	2308      	moveq	r3, #8
 8006d96:	230a      	movne	r3, #10
 8006d98:	2100      	movs	r1, #0
 8006d9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d9e:	6865      	ldr	r5, [r4, #4]
 8006da0:	60a5      	str	r5, [r4, #8]
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	bfa2      	ittt	ge
 8006da6:	6821      	ldrge	r1, [r4, #0]
 8006da8:	f021 0104 	bicge.w	r1, r1, #4
 8006dac:	6021      	strge	r1, [r4, #0]
 8006dae:	b90e      	cbnz	r6, 8006db4 <_printf_i+0x118>
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	d04d      	beq.n	8006e50 <_printf_i+0x1b4>
 8006db4:	4615      	mov	r5, r2
 8006db6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dba:	fb03 6711 	mls	r7, r3, r1, r6
 8006dbe:	5dc7      	ldrb	r7, [r0, r7]
 8006dc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006dc4:	4637      	mov	r7, r6
 8006dc6:	42bb      	cmp	r3, r7
 8006dc8:	460e      	mov	r6, r1
 8006dca:	d9f4      	bls.n	8006db6 <_printf_i+0x11a>
 8006dcc:	2b08      	cmp	r3, #8
 8006dce:	d10b      	bne.n	8006de8 <_printf_i+0x14c>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	07de      	lsls	r6, r3, #31
 8006dd4:	d508      	bpl.n	8006de8 <_printf_i+0x14c>
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	6861      	ldr	r1, [r4, #4]
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	bfde      	ittt	le
 8006dde:	2330      	movle	r3, #48	; 0x30
 8006de0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006de4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006de8:	1b52      	subs	r2, r2, r5
 8006dea:	6122      	str	r2, [r4, #16]
 8006dec:	f8cd a000 	str.w	sl, [sp]
 8006df0:	464b      	mov	r3, r9
 8006df2:	aa03      	add	r2, sp, #12
 8006df4:	4621      	mov	r1, r4
 8006df6:	4640      	mov	r0, r8
 8006df8:	f7ff fee2 	bl	8006bc0 <_printf_common>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d14c      	bne.n	8006e9a <_printf_i+0x1fe>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e04:	b004      	add	sp, #16
 8006e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0a:	4835      	ldr	r0, [pc, #212]	; (8006ee0 <_printf_i+0x244>)
 8006e0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e10:	6829      	ldr	r1, [r5, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e18:	6029      	str	r1, [r5, #0]
 8006e1a:	061d      	lsls	r5, r3, #24
 8006e1c:	d514      	bpl.n	8006e48 <_printf_i+0x1ac>
 8006e1e:	07df      	lsls	r7, r3, #31
 8006e20:	bf44      	itt	mi
 8006e22:	f043 0320 	orrmi.w	r3, r3, #32
 8006e26:	6023      	strmi	r3, [r4, #0]
 8006e28:	b91e      	cbnz	r6, 8006e32 <_printf_i+0x196>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	f023 0320 	bic.w	r3, r3, #32
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	2310      	movs	r3, #16
 8006e34:	e7b0      	b.n	8006d98 <_printf_i+0xfc>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	f043 0320 	orr.w	r3, r3, #32
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	2378      	movs	r3, #120	; 0x78
 8006e40:	4828      	ldr	r0, [pc, #160]	; (8006ee4 <_printf_i+0x248>)
 8006e42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e46:	e7e3      	b.n	8006e10 <_printf_i+0x174>
 8006e48:	0659      	lsls	r1, r3, #25
 8006e4a:	bf48      	it	mi
 8006e4c:	b2b6      	uxthmi	r6, r6
 8006e4e:	e7e6      	b.n	8006e1e <_printf_i+0x182>
 8006e50:	4615      	mov	r5, r2
 8006e52:	e7bb      	b.n	8006dcc <_printf_i+0x130>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	6826      	ldr	r6, [r4, #0]
 8006e58:	6961      	ldr	r1, [r4, #20]
 8006e5a:	1d18      	adds	r0, r3, #4
 8006e5c:	6028      	str	r0, [r5, #0]
 8006e5e:	0635      	lsls	r5, r6, #24
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	d501      	bpl.n	8006e68 <_printf_i+0x1cc>
 8006e64:	6019      	str	r1, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <_printf_i+0x1d2>
 8006e68:	0670      	lsls	r0, r6, #25
 8006e6a:	d5fb      	bpl.n	8006e64 <_printf_i+0x1c8>
 8006e6c:	8019      	strh	r1, [r3, #0]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	4615      	mov	r5, r2
 8006e74:	e7ba      	b.n	8006dec <_printf_i+0x150>
 8006e76:	682b      	ldr	r3, [r5, #0]
 8006e78:	1d1a      	adds	r2, r3, #4
 8006e7a:	602a      	str	r2, [r5, #0]
 8006e7c:	681d      	ldr	r5, [r3, #0]
 8006e7e:	6862      	ldr	r2, [r4, #4]
 8006e80:	2100      	movs	r1, #0
 8006e82:	4628      	mov	r0, r5
 8006e84:	f7f9 f9bc 	bl	8000200 <memchr>
 8006e88:	b108      	cbz	r0, 8006e8e <_printf_i+0x1f2>
 8006e8a:	1b40      	subs	r0, r0, r5
 8006e8c:	6060      	str	r0, [r4, #4]
 8006e8e:	6863      	ldr	r3, [r4, #4]
 8006e90:	6123      	str	r3, [r4, #16]
 8006e92:	2300      	movs	r3, #0
 8006e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e98:	e7a8      	b.n	8006dec <_printf_i+0x150>
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	47d0      	blx	sl
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d0ab      	beq.n	8006e00 <_printf_i+0x164>
 8006ea8:	6823      	ldr	r3, [r4, #0]
 8006eaa:	079b      	lsls	r3, r3, #30
 8006eac:	d413      	bmi.n	8006ed6 <_printf_i+0x23a>
 8006eae:	68e0      	ldr	r0, [r4, #12]
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	4298      	cmp	r0, r3
 8006eb4:	bfb8      	it	lt
 8006eb6:	4618      	movlt	r0, r3
 8006eb8:	e7a4      	b.n	8006e04 <_printf_i+0x168>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	47d0      	blx	sl
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d09b      	beq.n	8006e00 <_printf_i+0x164>
 8006ec8:	3501      	adds	r5, #1
 8006eca:	68e3      	ldr	r3, [r4, #12]
 8006ecc:	9903      	ldr	r1, [sp, #12]
 8006ece:	1a5b      	subs	r3, r3, r1
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	dcf2      	bgt.n	8006eba <_printf_i+0x21e>
 8006ed4:	e7eb      	b.n	8006eae <_printf_i+0x212>
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	f104 0619 	add.w	r6, r4, #25
 8006edc:	e7f5      	b.n	8006eca <_printf_i+0x22e>
 8006ede:	bf00      	nop
 8006ee0:	080074a1 	.word	0x080074a1
 8006ee4:	080074b2 	.word	0x080074b2

08006ee8 <_read_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d07      	ldr	r5, [pc, #28]	; (8006f08 <_read_r+0x20>)
 8006eec:	4604      	mov	r4, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7fa f89a 	bl	8001030 <_read>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_read_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_read_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20004818 	.word	0x20004818

08006f0c <__swbuf_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4614      	mov	r4, r2
 8006f12:	4605      	mov	r5, r0
 8006f14:	b118      	cbz	r0, 8006f1e <__swbuf_r+0x12>
 8006f16:	6983      	ldr	r3, [r0, #24]
 8006f18:	b90b      	cbnz	r3, 8006f1e <__swbuf_r+0x12>
 8006f1a:	f7ff f8a1 	bl	8006060 <__sinit>
 8006f1e:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <__swbuf_r+0x98>)
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d12b      	bne.n	8006f7c <__swbuf_r+0x70>
 8006f24:	686c      	ldr	r4, [r5, #4]
 8006f26:	69a3      	ldr	r3, [r4, #24]
 8006f28:	60a3      	str	r3, [r4, #8]
 8006f2a:	89a3      	ldrh	r3, [r4, #12]
 8006f2c:	071a      	lsls	r2, r3, #28
 8006f2e:	d52f      	bpl.n	8006f90 <__swbuf_r+0x84>
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	b36b      	cbz	r3, 8006f90 <__swbuf_r+0x84>
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	6820      	ldr	r0, [r4, #0]
 8006f38:	1ac0      	subs	r0, r0, r3
 8006f3a:	6963      	ldr	r3, [r4, #20]
 8006f3c:	b2f6      	uxtb	r6, r6
 8006f3e:	4283      	cmp	r3, r0
 8006f40:	4637      	mov	r7, r6
 8006f42:	dc04      	bgt.n	8006f4e <__swbuf_r+0x42>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7fe ffe4 	bl	8005f14 <_fflush_r>
 8006f4c:	bb30      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f4e:	68a3      	ldr	r3, [r4, #8]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60a3      	str	r3, [r4, #8]
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	6022      	str	r2, [r4, #0]
 8006f5a:	701e      	strb	r6, [r3, #0]
 8006f5c:	6963      	ldr	r3, [r4, #20]
 8006f5e:	3001      	adds	r0, #1
 8006f60:	4283      	cmp	r3, r0
 8006f62:	d004      	beq.n	8006f6e <__swbuf_r+0x62>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	07db      	lsls	r3, r3, #31
 8006f68:	d506      	bpl.n	8006f78 <__swbuf_r+0x6c>
 8006f6a:	2e0a      	cmp	r6, #10
 8006f6c:	d104      	bne.n	8006f78 <__swbuf_r+0x6c>
 8006f6e:	4621      	mov	r1, r4
 8006f70:	4628      	mov	r0, r5
 8006f72:	f7fe ffcf 	bl	8005f14 <_fflush_r>
 8006f76:	b988      	cbnz	r0, 8006f9c <__swbuf_r+0x90>
 8006f78:	4638      	mov	r0, r7
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <__swbuf_r+0x9c>)
 8006f7e:	429c      	cmp	r4, r3
 8006f80:	d101      	bne.n	8006f86 <__swbuf_r+0x7a>
 8006f82:	68ac      	ldr	r4, [r5, #8]
 8006f84:	e7cf      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <__swbuf_r+0xa0>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	bf08      	it	eq
 8006f8c:	68ec      	ldreq	r4, [r5, #12]
 8006f8e:	e7ca      	b.n	8006f26 <__swbuf_r+0x1a>
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f80c 	bl	8006fb0 <__swsetup_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0cb      	beq.n	8006f34 <__swbuf_r+0x28>
 8006f9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006fa0:	e7ea      	b.n	8006f78 <__swbuf_r+0x6c>
 8006fa2:	bf00      	nop
 8006fa4:	0800744c 	.word	0x0800744c
 8006fa8:	0800746c 	.word	0x0800746c
 8006fac:	0800742c 	.word	0x0800742c

08006fb0 <__swsetup_r>:
 8006fb0:	4b32      	ldr	r3, [pc, #200]	; (800707c <__swsetup_r+0xcc>)
 8006fb2:	b570      	push	{r4, r5, r6, lr}
 8006fb4:	681d      	ldr	r5, [r3, #0]
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	b125      	cbz	r5, 8006fc6 <__swsetup_r+0x16>
 8006fbc:	69ab      	ldr	r3, [r5, #24]
 8006fbe:	b913      	cbnz	r3, 8006fc6 <__swsetup_r+0x16>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7ff f84d 	bl	8006060 <__sinit>
 8006fc6:	4b2e      	ldr	r3, [pc, #184]	; (8007080 <__swsetup_r+0xd0>)
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	d10f      	bne.n	8006fec <__swsetup_r+0x3c>
 8006fcc:	686c      	ldr	r4, [r5, #4]
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fd4:	0719      	lsls	r1, r3, #28
 8006fd6:	d42c      	bmi.n	8007032 <__swsetup_r+0x82>
 8006fd8:	06dd      	lsls	r5, r3, #27
 8006fda:	d411      	bmi.n	8007000 <__swsetup_r+0x50>
 8006fdc:	2309      	movs	r3, #9
 8006fde:	6033      	str	r3, [r6, #0]
 8006fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fe4:	81a3      	strh	r3, [r4, #12]
 8006fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fea:	e03e      	b.n	800706a <__swsetup_r+0xba>
 8006fec:	4b25      	ldr	r3, [pc, #148]	; (8007084 <__swsetup_r+0xd4>)
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d101      	bne.n	8006ff6 <__swsetup_r+0x46>
 8006ff2:	68ac      	ldr	r4, [r5, #8]
 8006ff4:	e7eb      	b.n	8006fce <__swsetup_r+0x1e>
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <__swsetup_r+0xd8>)
 8006ff8:	429c      	cmp	r4, r3
 8006ffa:	bf08      	it	eq
 8006ffc:	68ec      	ldreq	r4, [r5, #12]
 8006ffe:	e7e6      	b.n	8006fce <__swsetup_r+0x1e>
 8007000:	0758      	lsls	r0, r3, #29
 8007002:	d512      	bpl.n	800702a <__swsetup_r+0x7a>
 8007004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007006:	b141      	cbz	r1, 800701a <__swsetup_r+0x6a>
 8007008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800700c:	4299      	cmp	r1, r3
 800700e:	d002      	beq.n	8007016 <__swsetup_r+0x66>
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff f901 	bl	8006218 <_free_r>
 8007016:	2300      	movs	r3, #0
 8007018:	6363      	str	r3, [r4, #52]	; 0x34
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	2300      	movs	r3, #0
 8007024:	6063      	str	r3, [r4, #4]
 8007026:	6923      	ldr	r3, [r4, #16]
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f043 0308 	orr.w	r3, r3, #8
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	6923      	ldr	r3, [r4, #16]
 8007034:	b94b      	cbnz	r3, 800704a <__swsetup_r+0x9a>
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800703c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007040:	d003      	beq.n	800704a <__swsetup_r+0x9a>
 8007042:	4621      	mov	r1, r4
 8007044:	4630      	mov	r0, r6
 8007046:	f000 f847 	bl	80070d8 <__smakebuf_r>
 800704a:	89a0      	ldrh	r0, [r4, #12]
 800704c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007050:	f010 0301 	ands.w	r3, r0, #1
 8007054:	d00a      	beq.n	800706c <__swsetup_r+0xbc>
 8007056:	2300      	movs	r3, #0
 8007058:	60a3      	str	r3, [r4, #8]
 800705a:	6963      	ldr	r3, [r4, #20]
 800705c:	425b      	negs	r3, r3
 800705e:	61a3      	str	r3, [r4, #24]
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	b943      	cbnz	r3, 8007076 <__swsetup_r+0xc6>
 8007064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007068:	d1ba      	bne.n	8006fe0 <__swsetup_r+0x30>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	0781      	lsls	r1, r0, #30
 800706e:	bf58      	it	pl
 8007070:	6963      	ldrpl	r3, [r4, #20]
 8007072:	60a3      	str	r3, [r4, #8]
 8007074:	e7f4      	b.n	8007060 <__swsetup_r+0xb0>
 8007076:	2000      	movs	r0, #0
 8007078:	e7f7      	b.n	800706a <__swsetup_r+0xba>
 800707a:	bf00      	nop
 800707c:	20000010 	.word	0x20000010
 8007080:	0800744c 	.word	0x0800744c
 8007084:	0800746c 	.word	0x0800746c
 8007088:	0800742c 	.word	0x0800742c

0800708c <__swhatbuf_r>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	460e      	mov	r6, r1
 8007090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007094:	2900      	cmp	r1, #0
 8007096:	b096      	sub	sp, #88	; 0x58
 8007098:	4614      	mov	r4, r2
 800709a:	461d      	mov	r5, r3
 800709c:	da08      	bge.n	80070b0 <__swhatbuf_r+0x24>
 800709e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	061a      	lsls	r2, r3, #24
 80070a8:	d410      	bmi.n	80070cc <__swhatbuf_r+0x40>
 80070aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ae:	e00e      	b.n	80070ce <__swhatbuf_r+0x42>
 80070b0:	466a      	mov	r2, sp
 80070b2:	f000 f89b 	bl	80071ec <_fstat_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	dbf1      	blt.n	800709e <__swhatbuf_r+0x12>
 80070ba:	9a01      	ldr	r2, [sp, #4]
 80070bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070c4:	425a      	negs	r2, r3
 80070c6:	415a      	adcs	r2, r3
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	e7ee      	b.n	80070aa <__swhatbuf_r+0x1e>
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	2000      	movs	r0, #0
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	b016      	add	sp, #88	; 0x58
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070d8 <__smakebuf_r>:
 80070d8:	898b      	ldrh	r3, [r1, #12]
 80070da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070dc:	079d      	lsls	r5, r3, #30
 80070de:	4606      	mov	r6, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	d507      	bpl.n	80070f4 <__smakebuf_r+0x1c>
 80070e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	2301      	movs	r3, #1
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	b002      	add	sp, #8
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	ab01      	add	r3, sp, #4
 80070f6:	466a      	mov	r2, sp
 80070f8:	f7ff ffc8 	bl	800708c <__swhatbuf_r>
 80070fc:	9900      	ldr	r1, [sp, #0]
 80070fe:	4605      	mov	r5, r0
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff f8f5 	bl	80062f0 <_malloc_r>
 8007106:	b948      	cbnz	r0, 800711c <__smakebuf_r+0x44>
 8007108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710c:	059a      	lsls	r2, r3, #22
 800710e:	d4ef      	bmi.n	80070f0 <__smakebuf_r+0x18>
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	e7e3      	b.n	80070e4 <__smakebuf_r+0xc>
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <__smakebuf_r+0x7c>)
 800711e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	9b00      	ldr	r3, [sp, #0]
 800712c:	6163      	str	r3, [r4, #20]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	6120      	str	r0, [r4, #16]
 8007132:	b15b      	cbz	r3, 800714c <__smakebuf_r+0x74>
 8007134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007138:	4630      	mov	r0, r6
 800713a:	f000 f869 	bl	8007210 <_isatty_r>
 800713e:	b128      	cbz	r0, 800714c <__smakebuf_r+0x74>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	89a0      	ldrh	r0, [r4, #12]
 800714e:	4305      	orrs	r5, r0
 8007150:	81a5      	strh	r5, [r4, #12]
 8007152:	e7cd      	b.n	80070f0 <__smakebuf_r+0x18>
 8007154:	08005ff9 	.word	0x08005ff9

08007158 <memmove>:
 8007158:	4288      	cmp	r0, r1
 800715a:	b510      	push	{r4, lr}
 800715c:	eb01 0402 	add.w	r4, r1, r2
 8007160:	d902      	bls.n	8007168 <memmove+0x10>
 8007162:	4284      	cmp	r4, r0
 8007164:	4623      	mov	r3, r4
 8007166:	d807      	bhi.n	8007178 <memmove+0x20>
 8007168:	1e43      	subs	r3, r0, #1
 800716a:	42a1      	cmp	r1, r4
 800716c:	d008      	beq.n	8007180 <memmove+0x28>
 800716e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007176:	e7f8      	b.n	800716a <memmove+0x12>
 8007178:	4402      	add	r2, r0
 800717a:	4601      	mov	r1, r0
 800717c:	428a      	cmp	r2, r1
 800717e:	d100      	bne.n	8007182 <memmove+0x2a>
 8007180:	bd10      	pop	{r4, pc}
 8007182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800718a:	e7f7      	b.n	800717c <memmove+0x24>

0800718c <_realloc_r>:
 800718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007190:	4680      	mov	r8, r0
 8007192:	4614      	mov	r4, r2
 8007194:	460e      	mov	r6, r1
 8007196:	b921      	cbnz	r1, 80071a2 <_realloc_r+0x16>
 8007198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800719c:	4611      	mov	r1, r2
 800719e:	f7ff b8a7 	b.w	80062f0 <_malloc_r>
 80071a2:	b92a      	cbnz	r2, 80071b0 <_realloc_r+0x24>
 80071a4:	f7ff f838 	bl	8006218 <_free_r>
 80071a8:	4625      	mov	r5, r4
 80071aa:	4628      	mov	r0, r5
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	f000 f83e 	bl	8007230 <_malloc_usable_size_r>
 80071b4:	4284      	cmp	r4, r0
 80071b6:	4607      	mov	r7, r0
 80071b8:	d802      	bhi.n	80071c0 <_realloc_r+0x34>
 80071ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071be:	d812      	bhi.n	80071e6 <_realloc_r+0x5a>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4640      	mov	r0, r8
 80071c4:	f7ff f894 	bl	80062f0 <_malloc_r>
 80071c8:	4605      	mov	r5, r0
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d0ed      	beq.n	80071aa <_realloc_r+0x1e>
 80071ce:	42bc      	cmp	r4, r7
 80071d0:	4622      	mov	r2, r4
 80071d2:	4631      	mov	r1, r6
 80071d4:	bf28      	it	cs
 80071d6:	463a      	movcs	r2, r7
 80071d8:	f7ff f807 	bl	80061ea <memcpy>
 80071dc:	4631      	mov	r1, r6
 80071de:	4640      	mov	r0, r8
 80071e0:	f7ff f81a 	bl	8006218 <_free_r>
 80071e4:	e7e1      	b.n	80071aa <_realloc_r+0x1e>
 80071e6:	4635      	mov	r5, r6
 80071e8:	e7df      	b.n	80071aa <_realloc_r+0x1e>
	...

080071ec <_fstat_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4d07      	ldr	r5, [pc, #28]	; (800720c <_fstat_r+0x20>)
 80071f0:	2300      	movs	r3, #0
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	f7f9 ff5e 	bl	80010ba <_fstat>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d102      	bne.n	8007208 <_fstat_r+0x1c>
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	b103      	cbz	r3, 8007208 <_fstat_r+0x1c>
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	bd38      	pop	{r3, r4, r5, pc}
 800720a:	bf00      	nop
 800720c:	20004818 	.word	0x20004818

08007210 <_isatty_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	4d06      	ldr	r5, [pc, #24]	; (800722c <_isatty_r+0x1c>)
 8007214:	2300      	movs	r3, #0
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7f9 ff5d 	bl	80010da <_isatty>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_isatty_r+0x1a>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_isatty_r+0x1a>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	20004818 	.word	0x20004818

08007230 <_malloc_usable_size_r>:
 8007230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007234:	1f18      	subs	r0, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	bfbc      	itt	lt
 800723a:	580b      	ldrlt	r3, [r1, r0]
 800723c:	18c0      	addlt	r0, r0, r3
 800723e:	4770      	bx	lr

08007240 <_init>:
 8007240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007242:	bf00      	nop
 8007244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007246:	bc08      	pop	{r3}
 8007248:	469e      	mov	lr, r3
 800724a:	4770      	bx	lr

0800724c <_fini>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	bf00      	nop
 8007250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007252:	bc08      	pop	{r3}
 8007254:	469e      	mov	lr, r3
 8007256:	4770      	bx	lr
